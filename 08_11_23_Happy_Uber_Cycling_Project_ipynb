{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "27fabd65",
   "metadata": {},
   "source": [
    "# Project Scope "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2262f512",
   "metadata": {},
   "source": [
    "### Project Scope and Plan\n",
    "\n",
    "In July 2019, the Department for Transport released data on the type and number of journeys within\n",
    "the United Kingdom per year. The annual numbers of car journeys consistently climbed from 2015 to\n",
    "2018, where it reached a nine-year high of 986 trips per household per year [1]. A noteworthy 75% of\n",
    "UK residents aged 17 and above possessed driver's licences, while 76% of households owned a\n",
    "minimum of one car, and 77% of the total distance travelled each year was by car.\n",
    "\n",
    "The growing congestion resulting from these statistics prompted a need for considering alternative\n",
    "transportation methods . As a result, the Mayor of London and the London Assembly introduced\n",
    "the Mayor's Transport Strategy in 2018, focusing on three primary objectives:\n",
    "\n",
    "- Promoting Healthy Streets & Healthy People\n",
    "- Enhancing the Public Transport Experience\n",
    "- Developing New Homes and Jobs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6875c8d8",
   "metadata": {},
   "source": [
    "### Objectives\n",
    "\n",
    "#### How can we increase the uptake of cycling in London?\n",
    "- Expanding cycling infrastructure so residents live within 400m of the cycling networks will increase the number of journeys completed by bike\n",
    "- Separating bike lanes from main roads, cars and large vehicles will make cyclists feel safer and thus increase the numbers of journeys completed by bike\n",
    "- Having a sustainable availability and distribution of safe and affordable hire bikes in London will increase the numbers of journeys completed by bike\n",
    "\n",
    "#### What are the main factors that determine whether people choose to cycle?\n",
    "- More journeys are completed by bike in dry weather than rain\n",
    "- More journeys are completed by bike in the summer months than in the winter months\n",
    "- The time of day has an impact on the number of journeys completed by bike\n",
    "- More journeys are completed by bike in central London than outer London as journeys are typically shorter\n",
    "\n",
    "#### What are the demographics of cyclists in these cities, and are there any underrepresentedgroups that can be engaged with to increase the uptake of cycling as a mode of transport?\n",
    "- The majority of journeys completed by bike in London are completed within commuting hours\n",
    "- Residents of ‘deprived’ areas of London complete fewer journeys on bike than those in ‘wealthy’ areas\n",
    "\n",
    "#### What interventions and changes to the transport network have had the most impact on cycling engagement?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1bf74325",
   "metadata": {},
   "source": [
    "## 1. Prepare the Workstation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b83df119",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pandas in /Users/b23/anaconda3/lib/python3.10/site-packages (2.1.2)\n",
      "Requirement already satisfied: numpy<2,>=1.22.4 in /Users/b23/anaconda3/lib/python3.10/site-packages (from pandas) (1.26.1)\n",
      "Requirement already satisfied: pytz>=2020.1 in /Users/b23/anaconda3/lib/python3.10/site-packages (from pandas) (2023.3.post1)\n",
      "Requirement already satisfied: tzdata>=2022.1 in /Users/b23/anaconda3/lib/python3.10/site-packages (from pandas) (2023.3)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /Users/b23/anaconda3/lib/python3.10/site-packages (from pandas) (2.8.2)\n",
      "Requirement already satisfied: six>=1.5 in /Users/b23/anaconda3/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n",
      "Requirement already satisfied: matplotlib in /Users/b23/anaconda3/lib/python3.10/site-packages (3.8.0)\n",
      "Requirement already satisfied: seaborn in /Users/b23/anaconda3/lib/python3.10/site-packages (0.13.0)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /Users/b23/anaconda3/lib/python3.10/site-packages (from matplotlib) (1.1.1)\n",
      "Requirement already satisfied: cycler>=0.10 in /Users/b23/anaconda3/lib/python3.10/site-packages (from matplotlib) (0.12.1)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /Users/b23/anaconda3/lib/python3.10/site-packages (from matplotlib) (4.43.1)\n",
      "Requirement already satisfied: pillow>=6.2.0 in /Users/b23/anaconda3/lib/python3.10/site-packages (from matplotlib) (9.4.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /Users/b23/anaconda3/lib/python3.10/site-packages (from matplotlib) (3.1.1)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /Users/b23/anaconda3/lib/python3.10/site-packages (from matplotlib) (2.8.2)\n",
      "Requirement already satisfied: packaging>=20.0 in /Users/b23/anaconda3/lib/python3.10/site-packages (from matplotlib) (23.1)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /Users/b23/anaconda3/lib/python3.10/site-packages (from matplotlib) (1.4.5)\n",
      "Requirement already satisfied: numpy<2,>=1.21 in /Users/b23/anaconda3/lib/python3.10/site-packages (from matplotlib) (1.26.1)\n",
      "Requirement already satisfied: pandas>=1.2 in /Users/b23/anaconda3/lib/python3.10/site-packages (from seaborn) (2.1.2)\n",
      "Requirement already satisfied: tzdata>=2022.1 in /Users/b23/anaconda3/lib/python3.10/site-packages (from pandas>=1.2->seaborn) (2023.3)\n",
      "Requirement already satisfied: pytz>=2020.1 in /Users/b23/anaconda3/lib/python3.10/site-packages (from pandas>=1.2->seaborn) (2023.3.post1)\n",
      "Requirement already satisfied: six>=1.5 in /Users/b23/anaconda3/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n",
      "Requirement already satisfied: conda in /Users/b23/anaconda3/lib/python3.10/site-packages (23.7.4)\n",
      "Requirement already satisfied: packaging in /Users/b23/anaconda3/lib/python3.10/site-packages (from conda) (23.1)\n",
      "Requirement already satisfied: boltons>=23.0.0 in /Users/b23/anaconda3/lib/python3.10/site-packages (from conda) (23.0.0)\n",
      "Requirement already satisfied: setuptools>=60.0.0 in /Users/b23/anaconda3/lib/python3.10/site-packages (from conda) (65.6.3)\n",
      "Requirement already satisfied: requests<3,>=2.27.0 in /Users/b23/anaconda3/lib/python3.10/site-packages (from conda) (2.31.0)\n",
      "Requirement already satisfied: toolz>=0.8.1 in /Users/b23/anaconda3/lib/python3.10/site-packages (from conda) (0.12.0)\n",
      "Requirement already satisfied: conda-package-handling>=1.3.0 in /Users/b23/anaconda3/lib/python3.10/site-packages (from conda) (2.0.2)\n",
      "Requirement already satisfied: pluggy>=1.0.0 in /Users/b23/anaconda3/lib/python3.10/site-packages (from conda) (1.0.0)\n",
      "Requirement already satisfied: jsonpatch>=1.32 in /Users/b23/anaconda3/lib/python3.10/site-packages (from conda) (1.32)\n",
      "Requirement already satisfied: pycosat>=0.6.3 in /Users/b23/anaconda3/lib/python3.10/site-packages (from conda) (0.6.4)\n",
      "Requirement already satisfied: tqdm>=4 in /Users/b23/anaconda3/lib/python3.10/site-packages (from conda) (4.65.0)\n",
      "Requirement already satisfied: pyopenssl>=16.2.0 in /Users/b23/anaconda3/lib/python3.10/site-packages (from conda) (23.2.0)\n",
      "Requirement already satisfied: ruamel-yaml<0.18,>=0.11.14 in /Users/b23/anaconda3/lib/python3.10/site-packages (from conda) (0.17.21)\n",
      "Requirement already satisfied: conda-package-streaming>=0.7.0 in /Users/b23/anaconda3/lib/python3.10/site-packages (from conda-package-handling>=1.3.0->conda) (0.7.0)\n",
      "Requirement already satisfied: jsonpointer>=1.9 in /Users/b23/anaconda3/lib/python3.10/site-packages (from jsonpatch>=1.32->conda) (2.1)\n",
      "Requirement already satisfied: cryptography!=40.0.0,!=40.0.1,<42,>=38.0.0 in /Users/b23/anaconda3/lib/python3.10/site-packages (from pyopenssl>=16.2.0->conda) (41.0.3)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /Users/b23/anaconda3/lib/python3.10/site-packages (from requests<3,>=2.27.0->conda) (1.26.16)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /Users/b23/anaconda3/lib/python3.10/site-packages (from requests<3,>=2.27.0->conda) (2023.7.22)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /Users/b23/anaconda3/lib/python3.10/site-packages (from requests<3,>=2.27.0->conda) (3.4)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /Users/b23/anaconda3/lib/python3.10/site-packages (from requests<3,>=2.27.0->conda) (2.0.4)\n",
      "Requirement already satisfied: ruamel.yaml.clib>=0.2.6 in /Users/b23/anaconda3/lib/python3.10/site-packages (from ruamel-yaml<0.18,>=0.11.14->conda) (0.2.6)\n",
      "Requirement already satisfied: zstandard>=0.15 in /Users/b23/anaconda3/lib/python3.10/site-packages (from conda-package-streaming>=0.7.0->conda-package-handling>=1.3.0->conda) (0.19.0)\n",
      "Requirement already satisfied: cffi>=1.12 in /Users/b23/anaconda3/lib/python3.10/site-packages (from cryptography!=40.0.0,!=40.0.1,<42,>=38.0.0->pyopenssl>=16.2.0->conda) (1.15.1)\n",
      "Requirement already satisfied: pycparser in /Users/b23/anaconda3/lib/python3.10/site-packages (from cffi>=1.12->cryptography!=40.0.0,!=40.0.1,<42,>=38.0.0->pyopenssl>=16.2.0->conda) (2.21)\n",
      "Requirement already satisfied: openpyxl in /Users/b23/anaconda3/lib/python3.10/site-packages (3.1.2)\n",
      "Requirement already satisfied: et-xmlfile in /Users/b23/anaconda3/lib/python3.10/site-packages (from openpyxl) (1.1.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install pandas\n",
    "!pip install matplotlib seaborn\n",
    "!pip install conda\n",
    "!pip install openpyxl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "471b6cb1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imports \n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c5d79306",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/cn/47qy272s11q7_n4t9zj37np40000gn/T/ipykernel_1180/1662675493.py:2: DtypeWarning: Columns (0,1,2,3,4,5,6,7,8) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  central_london = pd.read_csv('Central London.csv')\n",
      "/var/folders/cn/47qy272s11q7_n4t9zj37np40000gn/T/ipykernel_1180/1662675493.py:3: DtypeWarning: Columns (1,2,3,4,5,6,7) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  inner_london = pd.read_csv('Inner London.csv')\n"
     ]
    }
   ],
   "source": [
    "# Load the data\n",
    "central_london = pd.read_csv('Central London.csv')\n",
    "inner_london = pd.read_csv('Inner London.csv')\n",
    "outer_london = pd.read_csv('Outer London.csv')\n",
    "biking_sites = pd.read_excel('Biking sites.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "396af9da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>UnqID</th>\n",
       "      <th>ProgID</th>\n",
       "      <th>SurveyDescription</th>\n",
       "      <th>Easting</th>\n",
       "      <th>Northing</th>\n",
       "      <th>Location</th>\n",
       "      <th>Borough</th>\n",
       "      <th>Functional cycling area</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>CENCY001</td>\n",
       "      <td>CENCY</td>\n",
       "      <td>Central area cycle surveys</td>\n",
       "      <td>530251.49</td>\n",
       "      <td>178742.45</td>\n",
       "      <td>Millbank (south of Thorney Street)</td>\n",
       "      <td>Westminster</td>\n",
       "      <td>Central</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>CENCY002</td>\n",
       "      <td>CENCY</td>\n",
       "      <td>Central area cycle surveys</td>\n",
       "      <td>533362.68</td>\n",
       "      <td>181824.45</td>\n",
       "      <td>Bishopsgate</td>\n",
       "      <td>City of London</td>\n",
       "      <td>Central</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>CENCY003</td>\n",
       "      <td>CENCY</td>\n",
       "      <td>Central area cycle surveys</td>\n",
       "      <td>532334.06</td>\n",
       "      <td>180520.37</td>\n",
       "      <td>Southwark Bridge</td>\n",
       "      <td>Southwark</td>\n",
       "      <td>Central</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>CENCY004</td>\n",
       "      <td>CENCY</td>\n",
       "      <td>Central area cycle surveys</td>\n",
       "      <td>532052.50</td>\n",
       "      <td>179677.64</td>\n",
       "      <td>Southwark Bridge Road</td>\n",
       "      <td>Southwark</td>\n",
       "      <td>Central</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>CENCY005</td>\n",
       "      <td>CENCY</td>\n",
       "      <td>Central area cycle surveys</td>\n",
       "      <td>533031.59</td>\n",
       "      <td>180213.46</td>\n",
       "      <td>Tooley Street</td>\n",
       "      <td>Southwark</td>\n",
       "      <td>Central</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      UnqID ProgID           SurveyDescription    Easting   Northing  \\\n",
       "0  CENCY001  CENCY  Central area cycle surveys  530251.49  178742.45   \n",
       "1  CENCY002  CENCY  Central area cycle surveys  533362.68  181824.45   \n",
       "2  CENCY003  CENCY  Central area cycle surveys  532334.06  180520.37   \n",
       "3  CENCY004  CENCY  Central area cycle surveys  532052.50  179677.64   \n",
       "4  CENCY005  CENCY  Central area cycle surveys  533031.59  180213.46   \n",
       "\n",
       "                             Location         Borough Functional cycling area  \n",
       "0  Millbank (south of Thorney Street)     Westminster                 Central  \n",
       "1                         Bishopsgate  City of London                 Central  \n",
       "2                    Southwark Bridge       Southwark                 Central  \n",
       "3               Southwark Bridge Road       Southwark                 Central  \n",
       "4                       Tooley Street       Southwark                 Central  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# view the data\n",
    "biking_sites.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "29680d9b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survey wave (calendar quarter)</th>\n",
       "      <th>Equivalent financial quarter</th>\n",
       "      <th>Site ID</th>\n",
       "      <th>Location</th>\n",
       "      <th>Survey date</th>\n",
       "      <th>Weather</th>\n",
       "      <th>Time</th>\n",
       "      <th>Period</th>\n",
       "      <th>Direction</th>\n",
       "      <th>Start hour</th>\n",
       "      <th>Start minute</th>\n",
       "      <th>Number of private cycles</th>\n",
       "      <th>Number of cycle hire bikes</th>\n",
       "      <th>Total cycles</th>\n",
       "      <th>Unnamed: 14</th>\n",
       "      <th>Unnamed: 15</th>\n",
       "      <th>Unnamed: 16</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2014 Q1 (January-March)</td>\n",
       "      <td>2013-14 Q4</td>\n",
       "      <td>CENCY001</td>\n",
       "      <td>Millbank (south of Thorney Street)</td>\n",
       "      <td>ven, 24/01/14</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0600 - 0615</td>\n",
       "      <td>Early Morning (06:00-07:00)</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2014 Q1 (January-March)</td>\n",
       "      <td>2013-14 Q4</td>\n",
       "      <td>CENCY001</td>\n",
       "      <td>Millbank (south of Thorney Street)</td>\n",
       "      <td>ven, 24/01/14</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0615 - 0630</td>\n",
       "      <td>Early Morning (06:00-07:00)</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>6.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2014 Q1 (January-March)</td>\n",
       "      <td>2013-14 Q4</td>\n",
       "      <td>CENCY001</td>\n",
       "      <td>Millbank (south of Thorney Street)</td>\n",
       "      <td>ven, 24/01/14</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0630 - 0645</td>\n",
       "      <td>Early Morning (06:00-07:00)</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>6.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2014 Q1 (January-March)</td>\n",
       "      <td>2013-14 Q4</td>\n",
       "      <td>CENCY001</td>\n",
       "      <td>Millbank (south of Thorney Street)</td>\n",
       "      <td>ven, 24/01/14</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0645 - 0700</td>\n",
       "      <td>Early Morning (06:00-07:00)</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>6.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2014 Q1 (January-March)</td>\n",
       "      <td>2013-14 Q4</td>\n",
       "      <td>CENCY001</td>\n",
       "      <td>Millbank (south of Thorney Street)</td>\n",
       "      <td>ven, 24/01/14</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0700 - 0715</td>\n",
       "      <td>AM peak (07:00-10:00)</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Survey wave (calendar quarter) Equivalent financial quarter   Site ID  \\\n",
       "0        2014 Q1 (January-March)                   2013-14 Q4  CENCY001   \n",
       "1        2014 Q1 (January-March)                   2013-14 Q4  CENCY001   \n",
       "2        2014 Q1 (January-March)                   2013-14 Q4  CENCY001   \n",
       "3        2014 Q1 (January-March)                   2013-14 Q4  CENCY001   \n",
       "4        2014 Q1 (January-March)                   2013-14 Q4  CENCY001   \n",
       "\n",
       "                             Location    Survey date Weather         Time  \\\n",
       "0  Millbank (south of Thorney Street)  ven, 24/01/14     Dry  0600 - 0615   \n",
       "1  Millbank (south of Thorney Street)  ven, 24/01/14     Dry  0615 - 0630   \n",
       "2  Millbank (south of Thorney Street)  ven, 24/01/14     Dry  0630 - 0645   \n",
       "3  Millbank (south of Thorney Street)  ven, 24/01/14     Dry  0645 - 0700   \n",
       "4  Millbank (south of Thorney Street)  ven, 24/01/14     Dry  0700 - 0715   \n",
       "\n",
       "                        Period   Direction  Start hour  Start minute  \\\n",
       "0  Early Morning (06:00-07:00)  Northbound         6.0           0.0   \n",
       "1  Early Morning (06:00-07:00)  Northbound         6.0          15.0   \n",
       "2  Early Morning (06:00-07:00)  Northbound         6.0          30.0   \n",
       "3  Early Morning (06:00-07:00)  Northbound         6.0          45.0   \n",
       "4        AM peak (07:00-10:00)  Northbound         7.0           0.0   \n",
       "\n",
       "   Number of private cycles  Number of cycle hire bikes  Total cycles  \\\n",
       "0                       0.0                         0.0           0.0   \n",
       "1                      15.0                         0.0          15.0   \n",
       "2                      35.0                         0.0          35.0   \n",
       "3                      59.0                         2.0          61.0   \n",
       "4                      73.0                         0.0          73.0   \n",
       "\n",
       "   Unnamed: 14  Unnamed: 15  Unnamed: 16  \n",
       "0          NaN          NaN          NaN  \n",
       "1          NaN          NaN          NaN  \n",
       "2          NaN          NaN          NaN  \n",
       "3          NaN          NaN          NaN  \n",
       "4          NaN          NaN          NaN  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# View the data \n",
    "central_london.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f7cf79a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survey wave (year)</th>\n",
       "      <th>Site ID</th>\n",
       "      <th>Location</th>\n",
       "      <th>Survey date</th>\n",
       "      <th>Weather</th>\n",
       "      <th>Time</th>\n",
       "      <th>Period</th>\n",
       "      <th>Direction</th>\n",
       "      <th>Start hour</th>\n",
       "      <th>Start minute</th>\n",
       "      <th>Number of private cycles</th>\n",
       "      <th>Number of cycle hire bikes</th>\n",
       "      <th>Total cycles</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015.0</td>\n",
       "      <td>INNCY001</td>\n",
       "      <td>Grove Road</td>\n",
       "      <td>mer, 20/05/15</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0600 - 0615</td>\n",
       "      <td>Early Morning (06:00-07:00)</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015.0</td>\n",
       "      <td>INNCY001</td>\n",
       "      <td>Grove Road</td>\n",
       "      <td>mer, 20/05/15</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0615 - 0630</td>\n",
       "      <td>Early Morning (06:00-07:00)</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>6.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015.0</td>\n",
       "      <td>INNCY001</td>\n",
       "      <td>Grove Road</td>\n",
       "      <td>mer, 20/05/15</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0630 - 0645</td>\n",
       "      <td>Early Morning (06:00-07:00)</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>6.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015.0</td>\n",
       "      <td>INNCY001</td>\n",
       "      <td>Grove Road</td>\n",
       "      <td>mer, 20/05/15</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0645 - 0700</td>\n",
       "      <td>Early Morning (06:00-07:00)</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>6.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015.0</td>\n",
       "      <td>INNCY001</td>\n",
       "      <td>Grove Road</td>\n",
       "      <td>mer, 20/05/15</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0700 - 0715</td>\n",
       "      <td>AM peak (07:00-10:00)</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survey wave (year)   Site ID    Location    Survey date Weather  \\\n",
       "0              2015.0  INNCY001  Grove Road  mer, 20/05/15     Dry   \n",
       "1              2015.0  INNCY001  Grove Road  mer, 20/05/15     Dry   \n",
       "2              2015.0  INNCY001  Grove Road  mer, 20/05/15     Dry   \n",
       "3              2015.0  INNCY001  Grove Road  mer, 20/05/15     Dry   \n",
       "4              2015.0  INNCY001  Grove Road  mer, 20/05/15     Dry   \n",
       "\n",
       "          Time                       Period   Direction  Start hour  \\\n",
       "0  0600 - 0615  Early Morning (06:00-07:00)  Northbound         6.0   \n",
       "1  0615 - 0630  Early Morning (06:00-07:00)  Northbound         6.0   \n",
       "2  0630 - 0645  Early Morning (06:00-07:00)  Northbound         6.0   \n",
       "3  0645 - 0700  Early Morning (06:00-07:00)  Northbound         6.0   \n",
       "4  0700 - 0715        AM peak (07:00-10:00)  Northbound         7.0   \n",
       "\n",
       "   Start minute  Number of private cycles  Number of cycle hire bikes  \\\n",
       "0           0.0                       1.0                         0.0   \n",
       "1          15.0                       2.0                         0.0   \n",
       "2          30.0                       2.0                         0.0   \n",
       "3          45.0                       4.0                         0.0   \n",
       "4           0.0                       4.0                         0.0   \n",
       "\n",
       "   Total cycles  \n",
       "0           1.0  \n",
       "1           2.0  \n",
       "2           2.0  \n",
       "3           4.0  \n",
       "4           4.0  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# view the data\n",
    "inner_london.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b9e556a5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survey wave (year)</th>\n",
       "      <th>Site ID</th>\n",
       "      <th>Location</th>\n",
       "      <th>Survey date</th>\n",
       "      <th>Weather</th>\n",
       "      <th>Time</th>\n",
       "      <th>Period</th>\n",
       "      <th>Direction</th>\n",
       "      <th>Start hour</th>\n",
       "      <th>Start minute</th>\n",
       "      <th>Number of male cycles</th>\n",
       "      <th>Number of female cycles</th>\n",
       "      <th>Number of unknown cycles</th>\n",
       "      <th>Total cycles</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015</td>\n",
       "      <td>OUTCY001</td>\n",
       "      <td>High Road Leyton</td>\n",
       "      <td>ven, 26/06/15</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0600 - 0615</td>\n",
       "      <td>Early Morning (06:00-07:00)</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015</td>\n",
       "      <td>OUTCY001</td>\n",
       "      <td>High Road Leyton</td>\n",
       "      <td>ven, 26/06/15</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0615 - 0630</td>\n",
       "      <td>Early Morning (06:00-07:00)</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>6</td>\n",
       "      <td>15</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015</td>\n",
       "      <td>OUTCY001</td>\n",
       "      <td>High Road Leyton</td>\n",
       "      <td>ven, 26/06/15</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0630 - 0645</td>\n",
       "      <td>Early Morning (06:00-07:00)</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>6</td>\n",
       "      <td>30</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015</td>\n",
       "      <td>OUTCY001</td>\n",
       "      <td>High Road Leyton</td>\n",
       "      <td>ven, 26/06/15</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0645 - 0700</td>\n",
       "      <td>Early Morning (06:00-07:00)</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>6</td>\n",
       "      <td>45</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015</td>\n",
       "      <td>OUTCY001</td>\n",
       "      <td>High Road Leyton</td>\n",
       "      <td>ven, 26/06/15</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0700 - 0715</td>\n",
       "      <td>AM peak (07:00-10:00)</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survey wave (year)   Site ID          Location    Survey date Weather  \\\n",
       "0                2015  OUTCY001  High Road Leyton  ven, 26/06/15     Dry   \n",
       "1                2015  OUTCY001  High Road Leyton  ven, 26/06/15     Dry   \n",
       "2                2015  OUTCY001  High Road Leyton  ven, 26/06/15     Dry   \n",
       "3                2015  OUTCY001  High Road Leyton  ven, 26/06/15     Dry   \n",
       "4                2015  OUTCY001  High Road Leyton  ven, 26/06/15     Dry   \n",
       "\n",
       "          Time                       Period   Direction  Start hour  \\\n",
       "0  0600 - 0615  Early Morning (06:00-07:00)  Northbound           6   \n",
       "1  0615 - 0630  Early Morning (06:00-07:00)  Northbound           6   \n",
       "2  0630 - 0645  Early Morning (06:00-07:00)  Northbound           6   \n",
       "3  0645 - 0700  Early Morning (06:00-07:00)  Northbound           6   \n",
       "4  0700 - 0715        AM peak (07:00-10:00)  Northbound           7   \n",
       "\n",
       "   Start minute  Number of male cycles  Number of female cycles  \\\n",
       "0             0                      2                        1   \n",
       "1            15                      3                        0   \n",
       "2            30                      2                        0   \n",
       "3            45                      4                        0   \n",
       "4             0                      4                        1   \n",
       "\n",
       "   Number of unknown cycles  Total cycles  \n",
       "0                         0             3  \n",
       "1                         0             3  \n",
       "2                         0             2  \n",
       "3                         0             4  \n",
       "4                         0             5  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# view the data\n",
    "outer_london.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5345a26",
   "metadata": {},
   "source": [
    "## 2. Data Cleaning & Exploration"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88a78b3e",
   "metadata": {},
   "source": [
    "##### Biking Sites"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3236d603",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2023, 8)\n",
      "Index(['UnqID', 'ProgID', 'SurveyDescription', 'Easting', 'Northing',\n",
      "       'Location', 'Borough', 'Functional cycling area'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# Determine the metadata of the data sets\n",
    "print(biking_sites.shape)\n",
    "print(biking_sites.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d53f9993",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2023 entries, 0 to 2022\n",
      "Data columns (total 8 columns):\n",
      " #   Column                   Non-Null Count  Dtype  \n",
      "---  ------                   --------------  -----  \n",
      " 0   UnqID                    2023 non-null   object \n",
      " 1   ProgID                   2023 non-null   object \n",
      " 2   SurveyDescription        2023 non-null   object \n",
      " 3   Easting                  2023 non-null   float64\n",
      " 4   Northing                 2023 non-null   float64\n",
      " 5   Location                 2023 non-null   object \n",
      " 6   Borough                  2023 non-null   object \n",
      " 7   Functional cycling area  2021 non-null   object \n",
      "dtypes: float64(2), object(6)\n",
      "memory usage: 126.6+ KB\n"
     ]
    }
   ],
   "source": [
    "biking_sites.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "fc218766",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "UnqID                      0\n",
       "ProgID                     0\n",
       "SurveyDescription          0\n",
       "Easting                    0\n",
       "Northing                   0\n",
       "Location                   0\n",
       "Borough                    0\n",
       "Functional cycling area    2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Missing Values for biking sites\n",
    "missing_values_biking_sites = biking_sites.isnull().sum()\n",
    "\n",
    "# Displaying the columns with missing values and their count\n",
    "missing_values_biking_sites"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1da97eed",
   "metadata": {},
   "source": [
    "##### Outer London"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ccc89576",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(375660, 14)\n",
      "Index(['Survey wave (year)', 'Site ID', 'Location', 'Survey date', 'Weather',\n",
      "       'Time', 'Period', 'Direction', 'Start hour', 'Start minute',\n",
      "       'Number of male cycles', 'Number of female cycles',\n",
      "       'Number of unknown cycles', 'Total cycles'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# Determine the metadata of the data sets\n",
    "print(outer_london.shape)\n",
    "print(outer_london.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "7a19dc68",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 375660 entries, 0 to 375659\n",
      "Data columns (total 14 columns):\n",
      " #   Column                    Non-Null Count   Dtype \n",
      "---  ------                    --------------   ----- \n",
      " 0   Survey wave (year)        375660 non-null  int64 \n",
      " 1   Site ID                   375660 non-null  object\n",
      " 2   Location                  375660 non-null  object\n",
      " 3   Survey date               374492 non-null  object\n",
      " 4   Weather                   374692 non-null  object\n",
      " 5   Time                      375660 non-null  object\n",
      " 6   Period                    375660 non-null  object\n",
      " 7   Direction                 375660 non-null  object\n",
      " 8   Start hour                375660 non-null  int64 \n",
      " 9   Start minute              375660 non-null  int64 \n",
      " 10  Number of male cycles     375660 non-null  int64 \n",
      " 11  Number of female cycles   375660 non-null  int64 \n",
      " 12  Number of unknown cycles  375660 non-null  int64 \n",
      " 13  Total cycles              375660 non-null  int64 \n",
      "dtypes: int64(7), object(7)\n",
      "memory usage: 40.1+ MB\n"
     ]
    }
   ],
   "source": [
    "outer_london.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "722518e9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Survey wave (year)             0\n",
       "Site ID                        0\n",
       "Location                       0\n",
       "Survey date                 1168\n",
       "Weather                      968\n",
       "Time                           0\n",
       "Period                         0\n",
       "Direction                      0\n",
       "Start hour                     0\n",
       "Start minute                   0\n",
       "Number of male cycles          0\n",
       "Number of female cycles        0\n",
       "Number of unknown cycles       0\n",
       "Total cycles                   0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Missing values for outer london\n",
    "missing_values_outer_london = outer_london.isnull().sum()\n",
    "\n",
    "# Display the columns with missing values and their count\n",
    "missing_values_outer_london"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57e843ed",
   "metadata": {},
   "source": [
    "##### Inner London"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "dcc14a79",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(615168, 13)\n",
      "Index(['Survey wave (year)', 'Site ID', 'Location', 'Survey date', 'Weather',\n",
      "       'Time', 'Period', 'Direction', 'Start hour', 'Start minute',\n",
      "       'Number of private cycles', 'Number of cycle hire bikes',\n",
      "       'Total cycles'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# Determine the metadata of the data sets\n",
    "print(inner_london.shape)\n",
    "print(inner_london.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "bab7a252",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 615168 entries, 0 to 615167\n",
      "Data columns (total 13 columns):\n",
      " #   Column                      Non-Null Count   Dtype  \n",
      "---  ------                      --------------   -----  \n",
      " 0   Survey wave (year)          523776 non-null  float64\n",
      " 1   Site ID                     523776 non-null  object \n",
      " 2   Location                    523776 non-null  object \n",
      " 3   Survey date                 521024 non-null  object \n",
      " 4   Weather                     519102 non-null  object \n",
      " 5   Time                        523770 non-null  object \n",
      " 6   Period                      523770 non-null  object \n",
      " 7   Direction                   523776 non-null  object \n",
      " 8   Start hour                  523770 non-null  float64\n",
      " 9   Start minute                523770 non-null  float64\n",
      " 10  Number of private cycles    523776 non-null  float64\n",
      " 11  Number of cycle hire bikes  523776 non-null  float64\n",
      " 12  Total cycles                523776 non-null  float64\n",
      "dtypes: float64(6), object(7)\n",
      "memory usage: 61.0+ MB\n"
     ]
    }
   ],
   "source": [
    "inner_london.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7be4caab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Survey wave (year)            91392\n",
       "Site ID                       91392\n",
       "Location                      91392\n",
       "Survey date                   94144\n",
       "Weather                       96066\n",
       "Time                          91398\n",
       "Period                        91398\n",
       "Direction                     91392\n",
       "Start hour                    91398\n",
       "Start minute                  91398\n",
       "Number of private cycles      91392\n",
       "Number of cycle hire bikes    91392\n",
       "Total cycles                  91392\n",
       "dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# missing values for inner london\n",
    "missing_values_inner_london = inner_london.isnull().sum()\n",
    "\n",
    "# Display the columns with missing values and their count\n",
    "missing_values_inner_london"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1f63fbb",
   "metadata": {},
   "source": [
    "##### Central London"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "80a850a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1048366, 17)\n",
      "Index(['Survey wave (calendar quarter)', 'Equivalent financial quarter',\n",
      "       'Site ID', 'Location', 'Survey date', 'Weather', 'Time', 'Period',\n",
      "       'Direction', 'Start hour', 'Start minute', 'Number of private cycles',\n",
      "       'Number of cycle hire bikes', 'Total cycles', 'Unnamed: 14',\n",
      "       'Unnamed: 15', 'Unnamed: 16'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# Determine the metadata of the data sets\n",
    "print(central_london.shape)\n",
    "print(central_london.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f507b5a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1048366 entries, 0 to 1048365\n",
      "Data columns (total 17 columns):\n",
      " #   Column                          Non-Null Count   Dtype  \n",
      "---  ------                          --------------   -----  \n",
      " 0   Survey wave (calendar quarter)  758163 non-null  object \n",
      " 1   Equivalent financial quarter    758163 non-null  object \n",
      " 2   Site ID                         758163 non-null  object \n",
      " 3   Location                        758163 non-null  object \n",
      " 4   Survey date                     748007 non-null  object \n",
      " 5   Weather                         746329 non-null  object \n",
      " 6   Time                            758163 non-null  object \n",
      " 7   Period                          758163 non-null  object \n",
      " 8   Direction                       758163 non-null  object \n",
      " 9   Start hour                      758163 non-null  float64\n",
      " 10  Start minute                    758163 non-null  float64\n",
      " 11  Number of private cycles        758099 non-null  float64\n",
      " 12  Number of cycle hire bikes      758099 non-null  float64\n",
      " 13  Total cycles                    758163 non-null  float64\n",
      " 14  Unnamed: 14                     0 non-null       float64\n",
      " 15  Unnamed: 15                     0 non-null       float64\n",
      " 16  Unnamed: 16                     0 non-null       float64\n",
      "dtypes: float64(8), object(9)\n",
      "memory usage: 136.0+ MB\n"
     ]
    }
   ],
   "source": [
    "central_london.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "95a0d915",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Survey wave (calendar quarter)     290203\n",
       "Equivalent financial quarter       290203\n",
       "Site ID                            290203\n",
       "Location                           290203\n",
       "Survey date                        300359\n",
       "Weather                            302037\n",
       "Time                               290203\n",
       "Period                             290203\n",
       "Direction                          290203\n",
       "Start hour                         290203\n",
       "Start minute                       290203\n",
       "Number of private cycles           290267\n",
       "Number of cycle hire bikes         290267\n",
       "Total cycles                       290203\n",
       "Unnamed: 14                       1048366\n",
       "Unnamed: 15                       1048366\n",
       "Unnamed: 16                       1048366\n",
       "dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# missing values for central london\n",
    "missing_values_central_london = central_london.isnull().sum()\n",
    "\n",
    "# Display the columns within missing values and their count\n",
    "missing_values_central_london"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46dfcd9c",
   "metadata": {},
   "source": [
    "\n",
    "# Comparison of  number of journeys completed by bike in central, inner & outer london.  \n",
    "\n",
    "Hypothesis we are trying to solve for is 'More journeys are completed by bike in central London than outer London as journeys are typically shorter’"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2043cca1",
   "metadata": {},
   "source": [
    "### Central London"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "387d425f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survey wave (calendar quarter)</th>\n",
       "      <th>Equivalent financial quarter</th>\n",
       "      <th>Site ID</th>\n",
       "      <th>Location</th>\n",
       "      <th>Survey_date</th>\n",
       "      <th>Survey_weekday</th>\n",
       "      <th>Weather</th>\n",
       "      <th>Time</th>\n",
       "      <th>Period</th>\n",
       "      <th>Direction</th>\n",
       "      <th>Start time</th>\n",
       "      <th>Number of private cycles</th>\n",
       "      <th>Number of cycle hire bikes</th>\n",
       "      <th>Total cycles</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2014 Q1 (January-March)</td>\n",
       "      <td>2013-14 Q4</td>\n",
       "      <td>CENCY001</td>\n",
       "      <td>Millbank (south of Thorney Street)</td>\n",
       "      <td>24/01/14</td>\n",
       "      <td>Friday</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0600 - 0615</td>\n",
       "      <td>Early Morning</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>06:00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2014 Q1 (January-March)</td>\n",
       "      <td>2013-14 Q4</td>\n",
       "      <td>CENCY001</td>\n",
       "      <td>Millbank (south of Thorney Street)</td>\n",
       "      <td>24/01/14</td>\n",
       "      <td>Friday</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0615 - 0630</td>\n",
       "      <td>Early Morning</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>06:15</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2014 Q1 (January-March)</td>\n",
       "      <td>2013-14 Q4</td>\n",
       "      <td>CENCY001</td>\n",
       "      <td>Millbank (south of Thorney Street)</td>\n",
       "      <td>24/01/14</td>\n",
       "      <td>Friday</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0630 - 0645</td>\n",
       "      <td>Early Morning</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>06:30</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2014 Q1 (January-March)</td>\n",
       "      <td>2013-14 Q4</td>\n",
       "      <td>CENCY001</td>\n",
       "      <td>Millbank (south of Thorney Street)</td>\n",
       "      <td>24/01/14</td>\n",
       "      <td>Friday</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0645 - 0700</td>\n",
       "      <td>Early Morning</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>06:45</td>\n",
       "      <td>59</td>\n",
       "      <td>2</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2014 Q1 (January-March)</td>\n",
       "      <td>2013-14 Q4</td>\n",
       "      <td>CENCY001</td>\n",
       "      <td>Millbank (south of Thorney Street)</td>\n",
       "      <td>24/01/14</td>\n",
       "      <td>Friday</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0700 - 0715</td>\n",
       "      <td>AM peak</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>07:00</td>\n",
       "      <td>73</td>\n",
       "      <td>0</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Survey wave (calendar quarter) Equivalent financial quarter   Site ID  \\\n",
       "0        2014 Q1 (January-March)                   2013-14 Q4  CENCY001   \n",
       "1        2014 Q1 (January-March)                   2013-14 Q4  CENCY001   \n",
       "2        2014 Q1 (January-March)                   2013-14 Q4  CENCY001   \n",
       "3        2014 Q1 (January-March)                   2013-14 Q4  CENCY001   \n",
       "4        2014 Q1 (January-March)                   2013-14 Q4  CENCY001   \n",
       "\n",
       "                             Location Survey_date Survey_weekday Weather  \\\n",
       "0  Millbank (south of Thorney Street)    24/01/14         Friday     Dry   \n",
       "1  Millbank (south of Thorney Street)    24/01/14         Friday     Dry   \n",
       "2  Millbank (south of Thorney Street)    24/01/14         Friday     Dry   \n",
       "3  Millbank (south of Thorney Street)    24/01/14         Friday     Dry   \n",
       "4  Millbank (south of Thorney Street)    24/01/14         Friday     Dry   \n",
       "\n",
       "          Time         Period   Direction Start time  \\\n",
       "0  0600 - 0615  Early Morning  Northbound      06:00   \n",
       "1  0615 - 0630  Early Morning  Northbound      06:15   \n",
       "2  0630 - 0645  Early Morning  Northbound      06:30   \n",
       "3  0645 - 0700  Early Morning  Northbound      06:45   \n",
       "4  0700 - 0715        AM peak  Northbound      07:00   \n",
       "\n",
       "   Number of private cycles  Number of cycle hire bikes  Total cycles  \n",
       "0                         0                           0             0  \n",
       "1                        15                           0            15  \n",
       "2                        35                           0            35  \n",
       "3                        59                           2            61  \n",
       "4                        73                           0            73  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load the cleaned central london file\n",
    "clean_central_london = pd.read_csv('cleaned_central_london.csv')\n",
    "\n",
    "#view the dataframe\n",
    "clean_central_london.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "e9019d1a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number of private cycles</th>\n",
       "      <th>Number of cycle hire bikes</th>\n",
       "      <th>Total cycles</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>758163.000000</td>\n",
       "      <td>758163.000000</td>\n",
       "      <td>758163.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>14.823122</td>\n",
       "      <td>1.829918</td>\n",
       "      <td>16.653040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>26.255103</td>\n",
       "      <td>3.321462</td>\n",
       "      <td>28.675116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>8.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>16.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>18.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1177.000000</td>\n",
       "      <td>108.000000</td>\n",
       "      <td>1200.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Number of private cycles  Number of cycle hire bikes   Total cycles\n",
       "count             758163.000000               758163.000000  758163.000000\n",
       "mean                  14.823122                    1.829918      16.653040\n",
       "std                   26.255103                    3.321462      28.675116\n",
       "min                    0.000000                    0.000000       0.000000\n",
       "25%                    2.000000                    0.000000       3.000000\n",
       "50%                    7.000000                    1.000000       8.000000\n",
       "75%                   16.000000                    2.000000      18.000000\n",
       "max                 1177.000000                  108.000000    1200.000000"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# descriptive stats\n",
    "clean_central_london.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "2bd1ef60",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12625719"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Total count of cycles\n",
    "total_cycles_count = clean_central_london['Total cycles'].sum()\n",
    "\n",
    "total_cycles_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "57d8c750",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Period\n",
       "AM peak          29.832285\n",
       "Early Morning     6.722717\n",
       "Evening          12.428544\n",
       "Inter-peak        8.039593\n",
       "PM peak          28.236652\n",
       "Name: Total cycles, dtype: float64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Average number of cycles per period\n",
    "average_cycles_per_period = clean_central_london.groupby('Period')['Total cycles'].mean()\n",
    "\n",
    "average_cycles_per_period"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "920d0646",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Weather\n",
       "Cold             22197\n",
       "Dry           10797975\n",
       "Fine/Sunny      391390\n",
       "Mixed             9130\n",
       "Unknown           2674\n",
       "Wet            1402353\n",
       "Name: Total cycles, dtype: int64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Distribution of cycling based on weather conditions\n",
    "weather_distribution = clean_central_london.groupby('Weather')['Total cycles'].sum()\n",
    "\n",
    "weather_distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "1ac5e11d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Number of private cycles      11238343\n",
       "Number of cycle hire bikes     1387376\n",
       "dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Comparison between the usage of private cycles and cycle hire bikes\n",
    "private_vs_hire = clean_central_london[['Number of private cycles', 'Number of cycle hire bikes']].sum()\n",
    "\n",
    "private_vs_hire"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "0565e608",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting the distribution of cycling based on weather conditions\n",
    "plt.figure(figsize=(9, 5))\n",
    "weather_distribution.plot(kind='bar', color='skyblue')\n",
    "plt.title('Distribution of Total Cycles Based on Weather Conditions')\n",
    "plt.xlabel('Weather Condition')\n",
    "plt.ylabel('Total Number of Cycles')\n",
    "plt.xticks(rotation=45)\n",
    "plt.tight_layout()\n",
    "\n",
    "# Save the plot to a file\n",
    "plt.savefig('weather_distribution_plot.png')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "c628dff2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting the comparison between usage of private cycles and cycle hire bikes\n",
    "plt.figure(figsize=(9, 5))\n",
    "private_vs_hire.plot(kind='bar', color=['green', 'orange'])\n",
    "plt.title('Comparison Between Usage of Private Cycles and Cycle Hire Bikes')\n",
    "plt.xlabel('Type of Cycles')\n",
    "plt.ylabel('Total Count')\n",
    "plt.xticks(rotation=0)\n",
    "plt.tight_layout() \n",
    "\n",
    "# Save the plot to a file\n",
    "plt.savefig('private_vs_hire_plot.png')\n",
    "\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed00368b",
   "metadata": {},
   "source": [
    "### Inner London"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "569b2982",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survey wave (year)</th>\n",
       "      <th>Site ID</th>\n",
       "      <th>Location</th>\n",
       "      <th>Survey_weekday</th>\n",
       "      <th>Survey_date</th>\n",
       "      <th>Weather</th>\n",
       "      <th>Time</th>\n",
       "      <th>Period</th>\n",
       "      <th>Direction</th>\n",
       "      <th>Start time</th>\n",
       "      <th>Number of private cycles</th>\n",
       "      <th>Number of cycle hire bikes</th>\n",
       "      <th>Total cycles</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015</td>\n",
       "      <td>INNCY001</td>\n",
       "      <td>Grove Road</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>20/05/15</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0600 - 0615</td>\n",
       "      <td>Early Morning</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>06:00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015</td>\n",
       "      <td>INNCY001</td>\n",
       "      <td>Grove Road</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>20/05/15</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0615 - 0630</td>\n",
       "      <td>Early Morning</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>06:15</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015</td>\n",
       "      <td>INNCY001</td>\n",
       "      <td>Grove Road</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>20/05/15</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0630 - 0645</td>\n",
       "      <td>Early Morning</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>06:30</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015</td>\n",
       "      <td>INNCY001</td>\n",
       "      <td>Grove Road</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>20/05/15</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0645 - 0700</td>\n",
       "      <td>Early Morning</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>06:45</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015</td>\n",
       "      <td>INNCY001</td>\n",
       "      <td>Grove Road</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>20/05/15</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0700 - 0715</td>\n",
       "      <td>AM peak</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>07:00</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survey wave (year)   Site ID    Location Survey_weekday Survey_date  \\\n",
       "0                2015  INNCY001  Grove Road      Wednesday    20/05/15   \n",
       "1                2015  INNCY001  Grove Road      Wednesday    20/05/15   \n",
       "2                2015  INNCY001  Grove Road      Wednesday    20/05/15   \n",
       "3                2015  INNCY001  Grove Road      Wednesday    20/05/15   \n",
       "4                2015  INNCY001  Grove Road      Wednesday    20/05/15   \n",
       "\n",
       "  Weather         Time         Period   Direction Start time  \\\n",
       "0     Dry  0600 - 0615  Early Morning  Northbound      06:00   \n",
       "1     Dry  0615 - 0630  Early Morning  Northbound      06:15   \n",
       "2     Dry  0630 - 0645  Early Morning  Northbound      06:30   \n",
       "3     Dry  0645 - 0700  Early Morning  Northbound      06:45   \n",
       "4     Dry  0700 - 0715        AM peak  Northbound      07:00   \n",
       "\n",
       "   Number of private cycles  Number of cycle hire bikes  Total cycles  \n",
       "0                         1                           0             1  \n",
       "1                         2                           0             2  \n",
       "2                         2                           0             2  \n",
       "3                         4                           0             4  \n",
       "4                         4                           0             4  "
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load the cleaned central london file\n",
    "cleaned_inner_london = pd.read_csv('cleaned_inner_london.csv')\n",
    "\n",
    "#view the dataframe\n",
    "cleaned_inner_london.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "95329105",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survey wave (year)</th>\n",
       "      <th>Number of private cycles</th>\n",
       "      <th>Number of cycle hire bikes</th>\n",
       "      <th>Total cycles</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>523776.000000</td>\n",
       "      <td>523776.000000</td>\n",
       "      <td>523776.000000</td>\n",
       "      <td>523776.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2017.986070</td>\n",
       "      <td>5.929833</td>\n",
       "      <td>0.267943</td>\n",
       "      <td>6.196408</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.035381</td>\n",
       "      <td>10.937833</td>\n",
       "      <td>0.944529</td>\n",
       "      <td>11.309639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2015.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2016.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2018.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2020.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2021.000000</td>\n",
       "      <td>278.000000</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>280.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Survey wave (year)  Number of private cycles  \\\n",
       "count       523776.000000             523776.000000   \n",
       "mean          2017.986070                  5.929833   \n",
       "std              2.035381                 10.937833   \n",
       "min           2015.000000                  0.000000   \n",
       "25%           2016.000000                  1.000000   \n",
       "50%           2018.000000                  3.000000   \n",
       "75%           2020.000000                  7.000000   \n",
       "max           2021.000000                278.000000   \n",
       "\n",
       "       Number of cycle hire bikes   Total cycles  \n",
       "count               523776.000000  523776.000000  \n",
       "mean                     0.267943       6.196408  \n",
       "std                      0.944529      11.309639  \n",
       "min                      0.000000       0.000000  \n",
       "25%                      0.000000       1.000000  \n",
       "50%                      0.000000       3.000000  \n",
       "75%                      0.000000       7.000000  \n",
       "max                     29.000000     280.000000  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# descriptive stats\n",
    "cleaned_inner_london.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7e1b3b9e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3245530"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Total count of cycles inner london\n",
    "total_cycles_count_inner = cleaned_inner_london['Total cycles'].sum()\n",
    "\n",
    "total_cycles_count_inner"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e170eb75",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Period\n",
       "AM peak           9.631995\n",
       "Early Morning     3.058315\n",
       "Evening           5.428474\n",
       "Inter-peak        3.614787\n",
       "PM peak           9.737750\n",
       "unknown          10.000000\n",
       "Name: Total cycles, dtype: float64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Average number of cycles per time period for the new dataset\n",
    "average_cycles_per_period_inner = cleaned_inner_london.groupby('Period')['Total cycles'].mean()\n",
    "\n",
    "average_cycles_per_period_inner"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "9d126799",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Weather\n",
       "Dry           2778658\n",
       "Fine/Sunny      57523\n",
       "Mixed             156\n",
       "Unknown         99783\n",
       "Wet            306903\n",
       "Windy            2507\n",
       "Name: Total cycles, dtype: int64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Distribution of cycling based on weather conditions for the new dataset\n",
    "weather_distribution_inner = cleaned_inner_london.groupby('Weather')['Total cycles'].sum()\n",
    "\n",
    "weather_distribution_inner"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "e2237e62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Number of private cycles      3105904\n",
       "Number of cycle hire bikes     140342\n",
       "dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Comparison between the usage of private cycles and cycle hire bikes for the new dataset\n",
    "private_vs_hire_inner = cleaned_inner_london[['Number of private cycles', 'Number of cycle hire bikes']].sum()\n",
    "\n",
    "private_vs_hire_inner"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "80a175ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA3kAAAHqCAYAAAC5nYcRAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAAB/SUlEQVR4nO3dd3yN9///8edJJDEiQYkZO0bsvTe1qkbV6DCqqL2VKoqiilrVUq3d9tPardaqvVVJ7T1ixZYQMznv3x9+OV+nCXJInDge99vt3DjXONfrOrnOeJ7rfb3fFmOMEQAAAADAJbg5uwAAAAAAQNwh5AEAAACACyHkAQAAAIALIeQBAAAAgAsh5AEAAACACyHkAQAAAIALIeQBAAAAgAsh5AEAAACACyHkAQAAAIALIeTB5X322WeyWCwvZFuVK1dW5cqVbffXrVsni8Wi+fPnv5Dtt2rVSlmzZn0h23pWt27d0ocffqh06dLJYrGoe/fuzi7pqf77d01oZs6cKYvFolOnTjm7lATv1KlTslgsmjlzprNLealEPW9jxoxxdikJTkzHlCOfOy/D63fHjh3y9PTU6dOnnV2Ky7JYLPrss8/idRulS5dW375943UbSDgIeXipRH0YRt0SJ06sDBkyqGbNmpo4caJu3rwZJ9s5f/68PvvsMwUFBcXJ48WlhFxbbIwYMUIzZ85Uhw4dNGfOHL3//vvRlon6gvS0W2yC15YtW/TZZ5/pxo0bcb8zMYiMjNSMGTNUuXJlpUqVSl5eXsqaNatat26tnTt3vpAaXoT//o3c3NyUPn16vfHGG9q2bZuzy3sp/Prrr7JYLFq0aFG0eYUKFZLFYtHatWujzcucObPKli0bLzX9+eef8f5F83mFhYVpyJAhKlSokLy9vZUkSRLlz59fH3/8sc6fP+/s8h5rxIgRWrx4sbPLeCYDBgxQ8+bNlSVLFtu0ypUrK3/+/E6s6vlEvYdduXLF2aW8MB9//LEmT56skJAQZ5eCFyCRswsAnsXQoUOVLVs2PXjwQCEhIVq3bp26d++ur776Sr/99psKFixoW/bTTz9Vv379HHr88+fPa8iQIcqaNasKFy4c6/VWrlzp0HaexZNqmzZtmqxWa7zX8DzWrFmj0qVLa/DgwY9dplGjRsqZM6ft/q1bt9ShQwc1bNhQjRo1sk1PmzbtU7e3ZcsWDRkyRK1atVKKFCmeq/anuXPnjho1aqTly5erYsWK+uSTT5QqVSqdOnVKv/76q2bNmqXg4GBlypQpXut4kb799lt5e3vLarXqzJkzmjZtmipWrKgdO3Y49Np5FZUvX16StGnTJjVs2NA2PSwsTPv27VOiRIm0efNmValSxTbvzJkzOnPmjJo1axYvNf3555+aPHlygg16J06cUPXq1RUcHKy3335b7dq1k6enp/bs2aMffvhBixYt0pEjR5xdZoyfOyNGjFDjxo3VoEEDu+nvv/++mjVrJi8vrxdYYewFBQXpr7/+0pYtW5xdCp5T/fr15ePjo2+++UZDhw51djmIZ4Q8vJRq166t4sWL2+73799fa9as0RtvvKE333xTBw8eVJIkSSRJiRIlUqJE8Xuo3759W0mTJpWnp2e8budpPDw8nLr92Lh06ZICAwOfuEzBggXtgvqVK1fUoUMHFSxYUO+99158l/jM+vTpo+XLl2vcuHHRmqEOHjxY48aNc05h8ahx48ZKnTq17X6DBg2UP39+zZs3j5D3FBkyZFC2bNm0adMmu+lbt26VMUZvv/12tHlR96MCoqsJDw9XsmTJYpwXERGhRo0a6eLFi1q3bl2052D48OEaNWrUiyjzqRz53HF3d5e7u3s8V/TsZsyYocyZM6t06dLOLsVhUZ/NeMjNzU2NGzfW7NmzNWTIkBd2KQucg+aacBlVq1bVwIEDdfr0ac2dO9c2PaZrI1atWqXy5csrRYoU8vb2Vu7cufXJJ59IengdXYkSJSRJrVu3tjVHi7reIqqJyj///KOKFSsqadKktnUfd+1WZGSkPvnkE6VLl07JkiXTm2++qTNnztgtkzVrVrVq1Srauo8+5tNqi+mavPDwcPXq1Uv+/v7y8vJS7ty5NWbMGBlj7JazWCzq3LmzFi9erPz588vLy0v58uXT8uXLY37C/+PSpUtq06aN0qZNq8SJE6tQoUKaNWuWbX7U9YknT57UH3/8Yav9ea5DWbNmjSpUqKBkyZIpRYoUql+/vg4ePGib/9lnn6lPnz6SpGzZskXb5owZM1S1alX5+fnJy8tLgYGB+vbbb5+plrNnz2rq1KmqUaNGjNcZuru7q3fv3sqUKZPWrl372GZ6P/30kywWi7Zu3WqbdujQITVp0kRp0qRRkiRJlDt3bg0YMOCpNS1btsz2/CRPnlx169bV/v377ZYJCQlR69atlSlTJnl5eSl9+vSqX7/+M/9d0qVLJ0l2X3Dv37+vQYMGqVixYvL19VWyZMlUoUKFGJsi/u9//1OxYsWUPHly+fj4qECBApowYYLdMjdu3FD37t1tx3TOnDk1atSoaGexb9y4oVatWsnX11cpUqRQy5YtHWq2e+LECb399ttKlSqVkiZNqtKlS+uPP/6wWybquP711181fPhwZcqUSYkTJ1a1atV07Nixp26jfPny2r17t+7cuWObtnnzZuXLl0+1a9fWtm3b7PZr8+bNslgsKleunG3a3LlzVaxYMSVJkkSpUqVSs2bNor2/bNy4UW+//bYyZ84sLy8v+fv7q0ePHnbbbdWqlSZPnixJdk1x/+u7775Tjhw55OXlpRIlSujvv/+OtsyhQ4fUuHFjpUqVSokTJ1bx4sX122+/2S0T1fx+/fr16tixo/z8/J54lnvBggX6999/NWDAgBhDro+Pj4YPH243bd68ebbnJnXq1Hrvvfd07tw5u2VatWolb29vnTt3Tg0aNJC3t7fSpEmj3r17KzIy0m7Z2B5T//3csVgsCg8P16xZs2zPa9T7/eOuyfvmm2+UL18+eXl5KUOGDOrUqVO0bUV9Hh04cEBVqlRR0qRJlTFjRn355ZfRapo0aZLy5cunpEmTKmXKlCpevLh++umnaMv91+LFi1W1atVYBYLYfo5EPT/Hjh2ztbLw9fVV69atdfv27WiPG5tj/Emfzc/jaZ8zju7PvXv31KNHD6VJk0bJkyfXm2++qbNnz8a47d27d6t27dry8fGRt7e3qlWrFq05fNTxs3nzZvXs2VNp0qRRsmTJ1LBhQ12+fDnaY9aoUUOnT59+aS/5QOxxJg8u5f3339cnn3yilStXqm3btjEus3//fr3xxhsqWLCghg4dKi8vLx07dkybN2+WJOXNm1dDhw7VoEGD1K5dO1WoUEGS7K6BuXr1qmrXrq1mzZrpvffee2qzweHDh8tisejjjz/WpUuXNH78eFWvXl1BQUG2M46xEZvaHmWM0Ztvvqm1a9eqTZs2Kly4sFasWKE+ffro3Llz0c4sbdq0SQsXLlTHjh2VPHlyTZw4UW+99ZaCg4P12muvPbauO3fuqHLlyjp27Jg6d+6sbNmyad68eWrVqpVu3Lihbt26KW/evJozZ4569OihTJkyqVevXpKkNGnSxHr/H/XXX3+pdu3ayp49uz777DPduXNHkyZNUrly5bRr1y5lzZpVjRo10pEjR/Tzzz9r3LhxtjNOUdv89ttvlS9fPr355ptKlCiRfv/9d3Xs2FFWq1WdOnVyqJ5ly5YpIiIixmsM/6ty5cry9/fXjz/+aNdMT5J+/PFH5ciRQ2XKlJEk7dmzRxUqVJCHh4fatWunrFmz6vjx4/r999+jfaF91Jw5c9SyZUvVrFlTo0aN0u3bt/Xtt9/aQkXUjwFvvfWW9u/fry5duihr1qy6dOmSVq1apeDg4Fh14nPt2jVJktVq1blz5zRs2DAlTpxYTZo0sS0TFham77//Xs2bN1fbtm118+ZN/fDDD6pZs6Zds85Vq1apefPmqlatmu2MzMGDB7V582Z169ZN0sNf5itVqqRz586pffv2ypw5s7Zs2aL+/fvrwoULGj9+vKSHx379+vW1adMmffTRR8qbN68WLVqkli1bPnWfJOnixYsqW7asbt++ra5du+q1117TrFmz9Oabb2r+/PnR/m5ffPGF3Nzc1Lt3b4WGhurLL7/Uu+++q+3btz9xO+XLl9ecOXO0fft22485mzdvVtmyZVW2bFmFhoZq3759tjPbmzdvVp48eWyvx+HDh2vgwIFq0qSJPvzwQ12+fFmTJk1SxYoVtXv3blsT5Xnz5un27dvq0KGDXnvtNe3YsUOTJk3S2bNnNW/ePElS+/btdf78ea1atUpz5syJsd6ffvpJN2/eVPv27WWxWPTll1+qUaNGOnHihK0lwf79+1WuXDllzJhR/fr1U7JkyfTrr7+qQYMGWrBgQbTnrmPHjkqTJo0GDRqk8PDwxz5XUSExNq8x6eGX39atW6tEiRIaOXKkLl68qAkTJmjz5s12z4308Ie4mjVrqlSpUhozZoz++usvjR07Vjly5FCHDh0kPd8xNWfOHH344YcqWbKk2rVrJ0nKkSPHY5f/7LPPNGTIEFWvXl0dOnTQ4cOH9e233+rvv//W5s2b7VptXL9+XbVq1VKjRo3UpEkTzZ8/Xx9//LEKFCig2rVrS3rYlL9r165q3LixunXrprt372rPnj3avn273nnnncfWce7cOQUHB6to0aJP3ccojnyONGnSRNmyZdPIkSO1a9cuff/99/Lz87M7IxvbY1xy/LP5aWLzOePo/nz44YeaO3eu3nnnHZUtW1Zr1qxR3bp1o217//79qlChgnx8fNS3b195eHho6tSpqly5stavX69SpUrZLd+lSxelTJlSgwcP1qlTpzR+/Hh17txZv/zyi91yxYoVk/TwvaRIkSLP9fwggTPAS2TGjBlGkvn7778fu4yvr68pUqSI7f7gwYPNo4f6uHHjjCRz+fLlxz7G33//bSSZGTNmRJtXqVIlI8lMmTIlxnmVKlWy3V+7dq2RZDJmzGjCwsJs03/99VcjyUyYMME2LUuWLKZly5ZPfcwn1dayZUuTJUsW2/3FixcbSebzzz+3W65x48bGYrGYY8eO2aZJMp6ennbT/v33XyPJTJo0Kdq2HjV+/HgjycydO9c27f79+6ZMmTLG29vbbt+zZMli6tat+8TH+6/Lly8bSWbw4MG2aYULFzZ+fn7m6tWrdvW6ubmZFi1a2KaNHj3aSDInT56M9ri3b9+ONq1mzZome/bsdtP++zeISY8ePYwks3v37ljtU//+/Y2Xl5e5ceOGbdqlS5dMokSJ7PazYsWKJnny5Ob06dN261utVtv/o14XUft48+ZNkyJFCtO2bVu7dUJCQoyvr69t+vXr140kM3r06FjV/Kio19V/bylSpDDLly+3WzYiIsLcu3fPbtr169dN2rRpzQcffGCb1q1bN+Pj42MiIiIeu91hw4aZZMmSmSNHjthN79evn3F3dzfBwcHGmP879r/88ku7OipUqPDY18+junfvbiSZjRs32qbdvHnTZMuWzWTNmtVERkYaY/7vNZ43b167fZwwYYKRZPbu3fvE7ezfv99IMsOGDTPGGPPgwQOTLFkyM2vWLGOMMWnTpjWTJ082xhgTFhZm3N3dbX+/U6dOGXd3dzN8+HC7x9y7d69JlCiR3fSYjvWRI0cai8Vid2x16tTJxPTV4OTJk0aSee2118y1a9ds05csWWIkmd9//902rVq1aqZAgQLm7t27tmlWq9WULVvWBAQE2KZFHbfly5d/4t88SpEiRYyvr+9TlzPm4fuPn5+fyZ8/v7lz545t+tKlS40kM2jQINu0li1bGklm6NCh0bZXrFgx231Hjqn/fu4YY0yyZMlifI//7+v30qVLxtPT07z++uu248wYY77++msjyUyfPt02LerzaPbs2bZp9+7dM+nSpTNvvfWWbVr9+vVNvnz5Hvd0PdZff/0V7e/76Lb/+5ix/RyJen4eff0b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mW25qO6iBwwYoGbNmsnDw0P16tXT66+/bjtr1L59e926dUvTpk2Tn59fjF9OY2Ps2LE6fvy4unbtqoULF+qNN95QypQpFRwcrHnz5unQoUNq1qyZ3TotWrRQ48aNJUnDhg2L9pgTJ05U+fLlVbRoUbVr107ZsmXTqVOn9Mcffzx2nCMfHx99++23ev/991W0aFE1a9ZMadKkUXBwsP744w+VK1dOX3/9tY4cOaJq1aqpSZMmCgwMVKJEibRo0SJdvHgxWp2PM3/+fHl7e8sYo/Pnz+uHH37Q9evXNWXKFNuZizfeeEMLFy5Uw4YNVbduXZ08eVJTpkxRYGCgbt26ZXusqB/JqlatqkyZMun06dOaNGmSChcubPvVuU+fPvrtt9/0xhtvqFWrVipWrJjCw8O1d+9ezZ8/X6dOnVLq1KlVr149lStXTv369dOpU6cUGBiohQsXxvr6s379+unnn39W7dq11bVrV6VKlUqzZs3SyZMntWDBgmjXnz4PT09PlShRQhs3bpSXl5ftmI1StmxZjR07VpL9IOg5cuTQ559/rv79++vUqVNq0KCBkidPrpMnT2rRokVq166devfurTx58ihHjhzq3bu3zp07Jx8fHy1YsCDGJnhR2+7atatq1qwpd3f3WB8LUSZPnqzy5curQIECatu2rbJnz66LFy9q69atOnv2rP79919HnyJJD88OLly4UNWrV1fFihXVpEkTlStXTh4eHtq/f79++uknpUyZUsOHD5eHh4dGjRql1q1bq1KlSmrevLltCIWsWbOqR48eDm//eY+pYsWK6a+//tJXX32lDBkyKFu2bNG6wZce/rjTv39/DRkyRLVq1dKbb76pw4cP65tvvlGJEiXsOlmJrddff13p0qVTuXLllDZtWh08eFBff/216tat+9T35/r162vRokVOuY4rtsf48/jqq6+iDZju5uamTz75JNafM7FVuHBhNW/eXN98841CQ0NVtmxZrV69OsYxNT///HPbmL4dO3ZUokSJNHXqVN27dy/GcRBja9WqVcqcOTPDJ7wK4r8Dz5eDJLNo0SLb/ahulpMlS2Z3S5QokWnSpIkxxpi2bdsaSebw4cO29f755x8jyRw6dOhF78IrIaqr4Kibp6enSZcunalRo4aZMGGCXVf9Uf7blfXq1atN/fr1TYYMGYynp6fJkCGDad68ebQu2ZcsWWICAwNNokSJ7LrHjqnb6CiPG0Lh559/Nv379zd+fn4mSZIkpm7dutG6xDfGmLFjx5qMGTMaLy8vU65cObNz584Yu+9/XG3/HULBmIfdvvfo0cNkyJDBeHh4mICAADN69Gi7rpaNefga6NSpU7SaHje0w39dvHjRtG7d2qROndp4enqaAgUKxNhNfVwNoWDMw+69y5UrZ5IkSWJ8fHxMvXr1zIEDB6KtP2zYMJMxY0bj5uZm11X5b7/9ZgoWLGgSJ05ssmbNakaNGmWmT58ebciF2AyhECUiIsJ8//33pkKFCsbX19d4eHiYLFmymNatW8c4vMK9e/dMypQpja+vr11X74/at2+fadiwoUmRIoVJnDixyZ07txk4cKBt/n+7YI+ydu1aU7NmTePr62sSJ05scuTIYVq1amV27txpjDHmypUrplOnTiZPnjwmWbJkxtfX15QqVcr8+uuvT93PmIZQSJYsmSlTpky09a1WqxkxYoTJkiWL8fLyMkWKFDFLly6NdrzOnz/fvP7668bPz894enqazJkzm/bt25sLFy7YPd7NmzdN//79Tc6cOY2np6dJnTq1KVu2rBkzZoy5f/++bbmrV6+a999/3/j4+BhfX1/z/vvvm927d8dqCAVjjDl+/Lhp3Lix7XkvWbKkWbp0abTnWJKZN2+e3fSoIQdisx1jHg6pIcmULVs22ryFCxcaSSZ58uQxDjWwYMECU758edvnVJ48eUynTp3sPpsOHDhgqlevbry9vU3q1KlN27ZtbV3bP1pjRESE6dKli0mTJo2xWCy2986o/YlpuI2YXpvHjx83LVq0MOnSpTMeHh4mY8aM5o033jDz58+3LRObIXFicv36dTNo0CBToEABkzRpUpM4cWKTP39+079//2jHyi+//GKKFClivLy8TKpUqcy7775rzp49a7dMy5YtTbJkyaJtJ6ZhEGJ7TMW07qFDh0zFihVNkiRJjCTb++rjXr9ff/21yZMnj/Hw8DBp06Y1HTp0MNevX7db5nGfR/99bU2dOtVUrFjRvPbaa8bLy8vkyJHD9OnTx4SGhkZb97927doVbTiRx207tp8jjxu+4HHPRWyO8Sd9NsfkccPASDLu7u625WLzOePI/ty5c8d07drVvPbaayZZsmSmXr165syZMzG+jnbt2mVq1qxpvL29TdKkSU2VKlXMli1b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l6RVq1Y9dnkAAAAAeJU4vblmz5491bJlSxUvXlwlS5bU+PHjFR4ertatW0uSWrRooYwZM2rkyJGSpG7duqlSpUoaO3as6tatq//973/auXOnvvvuO2fuBgAAAAAkCE4PeU2bNtXly5c1aNAghYSEqHDhwlq+fLmtc5Xg4GC5uf3fCceyZcvqp59+0qeffqpPPvlEAQEBWrx4sfLnz++sXXjpeXl5afDgwdGatQISxweejOMDT8Mxgifh+MDTcIw8G6ePkwcAAAAAiDtOvSYPAAAAABC3CHkAAAAA4EIIeQAAAADgQgh5AAAAAOBCCHkAgHhF/14AALxYhDzY4csYXgSr1ersEvACnT17VhLvLwCejvcJPItHj5vIyEgnVpJwEPJgx2KxSJLu3LkjiTdbxI+osS//+ecf3b17l+PMhS1atEjlypXThg0bZLFY+FsDeKy7d+/avods375dBw8edHJFeFlEHTczZszQyJEjJfEdlpCHaCZNmqSaNWtK+r8XDRDXli1bptdff10RERF8+XdhKVKkUPHixdWjRw+CHp5JTMcLrQFcz/nz55U3b16dPn1aS5cu1euvv67Lly87uyy8RCIjI7Vs2TKtWbNGEt9hCXmIpkCBArp8+bI2bNjg7FLgwmrXrq00adLo888/l8SbsauqUqWK+vXrp3z58qlr167atm0bQQ+xZoyRxWLR+vXrNXr0aA0bNky3bt2ytQaA63B3d1eJEiVUuHBhNWzYUNOmTVPFihWdXRZeElarVe7u7hoxYoT+/fdfzZ0719klOR3vkq+4mL5o5cyZU0mTJrX9EsKXMTyv//7qfv/+fVmtVr3zzjv6999/FRoaKoljzdVERERIkpIlS6acOXPqwoULateuHUEPsWaxWPT777+rZs2a+u233/T111+raNGi2rFjh7NLQxxLmzatmjZtqtDQUHl5ealQoUKSOGuLmP33uruoH37Sp0+vevXq2U5UvMrHDyHvFRd19uT69eu2aZkyZVLnzp01YcIE7du3jzMseG5Rb7579uyRJHl6esrNzU1vvfWW1q9fr3nz5knibJ6rSZQokebNm6dq1arp0qVLKleunEJDQ9W+fXtt3LiRoIfHijouwsPD9dtvv2nKlClau3atjh49quzZs6tRo0bavHmzk6tEXCtatKjmzp2r+vXrq2TJktq5c6fc3NzoSAM2Y8aM0YEDB+Tu7i5J+uqrrzRgwACdOHFC0sMfFevUqaPZs2dr165dr/RZ/1d3z19xj/6yMX78eLVp00YTJkyQMUaRkZFq1KiRChcurPXr10uipyI8v4ULF6p+/fqqVauWNm/erMuXLytfvnzq3bu3fvnlF50/f97ZJSKOhYSEaMiQIerdu7e+/vprLVy4UFOnTlX27NnVuXNnbd++naCHGFksFm3atEklS5bUiRMnlDdvXiVKlEg+Pj5avny58ufPr6ZNm2rLli3OLhXPyBhje+2HhoYqJCREmTNn1jvvvKOpU6eqRo0aqlq1qv755x/bF/qFCxfq0KFDziwbTrRu3TrNnDlTQ4YM0ZEjRyRJt2/f1rRp09SqVSs1bdpUp0+f1ptvvqlWrVrp66+/tnUk+Coi5L2ion7Z+PHHH3X06FH5+/vriy++UKVKlTRy5Eh5eHioZMmS+vbbb23tnAFH/LeJRNGiRTV9+nQ9ePBA3bp1U61atbR06VJlyJBBly5d0qVLl2JcDy+viIgIXb58Wf7+/rZptWrVUtu2bXX58mV16NDB1hkLINk32c6TJ48SJ06stWvX2pp0R70/LF++XIULF1a1atW0fft2p9SK52exWLRkyRI1aNBAxYsXV+PGjfXZZ5/J29tb33//verWrasqVapo7ty56tWrl9q1aycvLy9nlw0nqVy5svr27auLFy9qwIABOnnypD799FMdPHhQbdu21aVLl1S1alW1bt1aJ0+e1OnTp3X79m1Jr+jlIAavlMjISNv/J06caFKnTm2OHz9ujDHm8uXLpk+fPqZixYomU6ZMpm/fvsZisZgpU6Y4q1y8pB49zo4ePWrOnz9vrFarbdratWtN3759TZYsWUyzZs2MxWIxb775prl//74zykU8uX79uqlataoZPHiwuXPnjt282rVrm9dee81UqFDBhIeH2x0feLWtXr3ajB492hhjzKVLl0yJEiVMYGCgOXbsmDHG2B0rb731ljly5IhT6sSzuXv3ru3/f/75p0mSJIkZO3as2b17t+ncubPx8PAwf/zxhzHGmKtXr5r27dubzJkzmyJFipidO3c6q2w42b1792z/nzx5sqlSpYp5++23o73+f/zxR9O/f3+TJEkSY7FYTJ8+fV50qQkGIe8VtWvXLtO/f38zd+5cY4wxDx48MMY8/PC8f/++GT9+vGnUqJHx9PQ0devWdWapeIn179/fBAYGmlSpUpmePXuaTZs22c3ftm2bmTFjhilRooTJnDmz+eeff4wx9iERL4eoL9537twxt27dsk0fNGiQyZgxo1m0aJEt6EVERJjWrVubr776yly8eNEp9SJhevDggRk9erQpWLCg+fvvv40xxly8eNEUKVLEFChQwPajJD8KvJzOnDljAgMDzenTp40xxjRp0sQMGTLEGGPMtWvXTMaMGU2XLl2irXfs2DFz9erVF1orEo5HX+9jx441LVu2NNmzZzdubm6mSZMm5vDhw9HW2b9/v+nQoYOpUaPGK3vsEPJeQdu3bzcWi8W4u7ubGTNm2Kb/94v1rVu3zJo1a0zixInNwoULX3CVeBk9egzNmzfPZMyY0SxevNgMHz7clC5d2jRo0MCsXbs22np37941gYGBMX64I+GL+gBeunSpqVOnjsmfP795++23zfLly40xxrz33nsmc+bMpnfv3mbatGmmc+fOJnPmzCY4ONiZZSOB+G9g27lzp6lUqZIZOnSobVpU0CtatChn7l5iwcHBJnv27KZly5bmwYMHpm7dumb+/PnmzJkzJmPGjKZdu3a2ZRcvXmzWrFnjxGqR0IwePdokT57c/PHHH+bff/81Q4YMMcWLFzdvv/227Ux/ZGSk7bvIvn37TOLEic3vv//uzLKdhmvyXgEhISHau3ev5s6dq3379qlkyZJasGCBrFarNmzYYBtsNOo6PfP/2y0nTZpUFStWVK1atbR//36n1Y+XR9QxtH79em3cuFGfffaZ6tevr08++USDBg1SWFiYxo0bZzcG47179+Tl5aVOnTpp7969Cg8Pd1b5eEYWi0VLly5VkyZNVKxYMX399dc6f/682rdvr71792rOnDlq1aqV9u/frxEjRujvv//WokWL7K7Vw6vLYrHor7/+Uq9evRQZGalixYrpgw8+0Oeff65//vlHkuTn56cVK1bo+vXrat26tR48eODkqvEsMmTIoPbt2+uff/7RkiVL5O7urhUrVqhy5cqqXbu2pkyZIkm6evWq5s+fr6NHj3KdNmSM0b1797RmzRp17NhRderUUcGCBTVo0CC1bdtWO3futF2jF/U9xGq1Kl++fCpZsqTOnTvn5D1wEmenTMSvBQsWmDp16ph06dIZHx8f4+npad58801z5swZs2DBAmOxWMznn39ubty48djHqFy5smnduvULrBovs6CgIJMjRw6TPHlyM2bMGLt5y5YtM9WqVTMNGzY0K1eutJv3zjvvmFKlSpnbt2+/yHLxnKxWqwkNDTXVq1c3I0aMMMYYEx4ebjJlymS6dOliIiIibMvev3/fXL582YSGhjqrXCQwVqvV3Lt3zwQEBBiLxWKqV69uFi1aZK5fv2569+5tSpYsaUJCQmzLX7582Zw4ccKJFcNR165ds7t/48YNU6BAAdOyZUuzbds2kyxZMlO4cGG7ZT755BOTI0cOW/NcwBhjGjdubFq0aBFteuvWrY23t7epVq2arSmwMcbMnDnTWCyWV/bsP2fyXNi0adP04YcfqmrVqpo7d65Onz5t64WoWrVqKlmypObOnauBAwfqm2++UVhYWLTH2LVrl4KDg9W1a1cn7AFeBuY/PVYVKlRIw4YNU8aMGfXnn38qKCjINq9WrVrq27evjh8/rtWrV9vWv3Xrli5fvqyJEycqSZIkL7J8PCeLxaIkSZLo9u3batiwoc6ePauAgADVqVNHEydOlLu7u/78808FBwfLw8NDqVOnlo+Pj7PLhpNFvW9YLBZ5enpq2rRpqlixou7fv6/Fixerffv2Spo0qQICArRw4ULb2ZzUqVMrW7ZsziwdDjh+/Lhy5cqlBg0a6NKlS7p9+7Z8fX01bdo0/fjjj9q6datmzJihf//9V02bNlXr1q3VokULTZ48WfPmzVP27NmdvQtwgsedvc2ZM6c2bdpkG3M3Sq5cuVSoUCGVKlVKmTJlsk2vWbOmDh48qICAgHitN6GymP9+Q4NLmDZtmjp37qyff/5ZjRo1sps3b948DR06VClTptT69es1ZcoUdenSRR9//LE++eQTJUuWzLbs9evXFRkZqdSpU7/oXcBLwGq12ppGhIWFKUmSJPLw8JAkzZkzR+PHj1eRIkXUtWtXFSxY0Lbe9u3bVaJECbm5uckYI4vFooiICCVKlMgp+4Fnc+LECWXPnl337t1TyZIlVatWLS1cuFBVq1bV119/LQ8PD4WEhOijjz7Su+++q7ffftvZJSMB2bRpk1KmTKmsWbMqUaJEGjJkiHx9fVWiRAn9888/GjRokCwWi3LkyKGNGzcqRYoUzi4ZDjp69KhKliyp0NBQ1ahRQ3Xq1FG1atWUP39+9ezZU5s2bdLkyZN19+5d278BAQFq06aN8uTJ4+zy4QSPfq9YuXKl3NzclCRJEpUrV06SVLx4cd25c0fTpk1Trly5lDx5cjVr1kxVq1ZV586dZbFYZLVaZYxh+C8nnkVEPFm7dq2xWCy2HqusVquxWq22HjSNMebrr782Xl5eZv78+cYYY4YNG2bKli1Lj2V4JiNGjDClSpUyb7zxhhk1apRt+vTp003RokXNBx98YPbs2RNtvUeb8uHlcuzYMZM4cWJbj6izZs0yKVOmNGXKlLFbbsCAASZv3rzm1KlTzigTCZTVajUVKlQwWbNmNf369TNnzpwxO3bsMAULFjS7du0yxhizfv16U6VKFZMqVSpz5swZJ1eM2Ir6HhH1nWPChAmmR48eZsCAAeajjz4yJUqUMMuWLTPbt283efLkMYMHDzbGGFtTfXpXfnU9+h20V69eJlWqVMbf39/4+/ubzz//3BjzsKO2smXLmmzZspns2bOb/Pnzm4CAALte4vEQZ/Jc0NGjR9WmTRulSpVKvXr1UoUKFWzzHv2FpGDBgipXrpy+/fZbSbKdUYn6F3icR4+jb775RgMHDlTv3r0VFBSkAwcOqGTJkvrhhx8kSTNmzNC3336rTJkyafTo0cqRI4czS0ccOXnypCpVqqTly5crMDBQ586d07hx4zRz5ky9++678vPz08mTJzVv3jytX79ehQsXdnbJSIDGjRun1atXa+/evfrpp580d+5cbd++XWvWrFGKFCl0/vx5eXp60prkJXLr1i15e3vb7q9fv15ffPGFunbtqsqVK+uHH37QwIEDNWjQIK1YsULbtm3Thg0bbK09+A7y6jGPNN+WpFOnTql+/fqaNWuWrFar1q9frz59+qh///4aNmyYpIet0i5fviyr1aqPPvpIiRIlUmRkJGfvHkHbKBcUEBCgH374QV27dtXw4cP16aefqnz58pL+7wUUFhamO3fuKEOGDLb1CHiIraiAt3btWt26dUuzZs3SG2+8obCwMP38888aM2aMPvjgA02fPl2tW7dWeHi4du3axbU0Lymr1SqLxWL33pAtWzalTp1aK1euVGBgoDJmzKjOnTsrMDBQEydOVIoUKZQ1a1Zt3bpVgYGBTqweCUHUZ8vRo0d1584dhYaGqkKFCurRo4caNmyoadOmqVatWqpXr54uXryo6dOnq0uXLnafUUj4QkJCVLJkSb3//vtq3769MmfOrEqVKmnjxo1q0aKFgoKC1LlzZxUuXFgzZsxQokSJFBYWpk8//VSLFi2Su7s730FeMf8NZmPHjtW///6rSpUq2X4czJUrlzw9PdWtWzcZY/T5559Ha/5PwIuB084hIt4dOXLE1KpVy9SsWdM2CHXUaezdu3ebypUr23o45PQ2HLVx40aTKVMmkzp1arNx40bb9NDQUDN16lSTK1cu06ZNG9v0qGOMpjgvj40bN9o18/79999Nz549zciRI80ff/xhihcvbr788sto60U1w71///4LqxUJV9Rrf/78+SZz5swmW7Zsxtvb29SqVcvs3LnTNn/58uWmSZMmxmKxmPLly9PT7kvo+vXrZsiQIcbX19dUrVrVjBs3zjavZcuWpmXLlrbevENCQsyaNWtM3bp1Y2zOD9fXuHFj07JlS9v9sLAw07NnT+Pt7W1q165tt+zNmzfN119/bTw9PU2PHj1ecKUvJ5prurijR4+qa9euMsZowIABqlChgiIiIlS/fn25ublpyZIltrMywJOY/5zlPXnypGbOnKmvv/5a7733niZMmGCbFxYWpl9++UW9e/e2dehj/tMcAwnbnDlzNHPmTP3666967bXXJEmff/65goKCtHfvXqVJk0ZbtmyRJH344Ye6d++eatasKXd3d1WpUkV+fn60DIDNli1bVLNmTU2YMEHFihWTJDVv3lypUqXS+PHjVbx4cUnSxYsXtXXrVuXLl++V7RHPFRw4cECDBw9WUFCQMmXKpClTpmjPnj36448/9N5776l69eq2ZXmfeHVt2rTJ1tIs6jg4ffq0ZsyYoaFDh2ry5Mnq0KGDbfnw8HB9/fXX+uOPP7R+/XqOm6cg5L0CooKem5ubPvnkE3311Vc6dOiQgoKC5OHhYXd9FfA0EyZMUMOGDZU5c2adO3dO33//vX788Uc1b95cQ4YMsS0XGhqq9evXq27dujSheIlEvR/cvHlTN2/eVIYMGRQcHKwMGTLY9X56584djR49WmPHjlXLli115MgRXb16VSdPntTevXuVPn16J+4FEprx48dr4cKFWrNmja1J3o0bN1SqVCkFBgZq0aJFzi4RcezatWvaunWrBg4cqNDQUDVp0kSrVq1SsWLFNHXqVGeXByfbtGmTGjZsqJMnT2rJkiUaOnSo9u/fr0SJEuncuXP65ptvNHHiRI0ZM0bt27e3rXf37l15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UpcuXbIt06VLF9WrV09Xr161u8YGgGv6+++/lSVLFvXp00eHDx+WJL3++uuqUKGCmjdvrgsXLqhdu3ZasmSJzp49qyRJkuj69evRxlDke8Wzo7kmAG3cuFGdO3fWqlWr5OfnJ0maN2+e/vrrL/38888qVaqUGjdubBuQdOnSpfL09FS1atVs4+DxRvxyOnr0qPr16yer1aoWLVrIYrFowoQJSpEihZYsWaKSJUtqw4YN8vT01OHDh5UsWTJlypTJ2WXDSYKDg5U5c2ZJD38kuHjxovLnz68///xTpUqVkiQNGDBAy5cvV506ddStWzelTp3atv7169eVMmVKp9QO4MW5ceOG5syZo6FDhyowMFA1a9bUJ598Iklq1aqVkiVLpi+++ELJkyfXtWvXdPz4cc2ePVvjxo3j2rs4QsgDXmEbN26Uh4eHjDEqV66c1q1bpzJlyqhz584KCgpS6tSpVb16da1bt04XL17UN998E62TBALey+/w4cPq0aOHIiMjNWnSJGXMmFF79+7V8OHD1bRpU7333nt0pgN9//33+v777zVy5EhVqVJFknTmzBmVK1dO27Ztk5+fn+3L2SeffKIVK1aoXr166tixo+3HIwCvliNHjmjkyJFav3690qVLp0mTJikoKEgbN27URx99pNKlS0f7fKEXzbhByANeUWFhYerevbsyZ86sQYMGqVWrVpo7d64yZMggT09PDR8+XBUrVlTGjBn1999/q1y5clq4cKHeeOMNZ5eOeHD06FF17txZkjRo0CCVK1fOyRUhoTl69KgaNGigLFmyqHfv3qpatarOnj2rGjVqKCgoSF5eXrp//748PT0lSZ9++ql+/PFHtW3bVv369bONuwng1RIaGqqgoCD169dPly9fVp06dbR8+XJVr15d33zzjbPLc1m84wKvKB8fH5UvX16zZs3SlStXNHv2bC1fvlzjxo3T4cOH1bx5c2XMmFGSlCxZMhUpUkSpUqVyctWILwEBAfr666/l5uamYcOGadOmTc4uCQlIZGSkAgIC9Pvvv+vcuXMaNWqUNm/erCtXrigyMlL379+XJFvAk6TPP/9cHTp0ULNmzQh4wCvM19dXlSpV0tatW9W0aVOdPn1aly9f1pQpU7R48WJnl+eyOJMHvIIebRrRtGlTJUqUSD/88IMSJ04cbdnw8HA1b95cd+/e1fLly/my5uKOHj2qnj176sqVKxo3bpxKly7t7JKQQEQ1zT5x4oQaNmyo7Nmzq1KlSho3bpx69+4tDw8PpUyZUlarVWfPnlX58uVVpkwZZ5cNIAGIGk5Bknbs2KGlS5dq1apV2rhxI00z4wkhD3hFRQW9v/76S998840GDBigYsWK2drC37hxQ+vWrdO0adN09uxZ7dy5Ux4eHnZv1HBNhw4d0sCBAzV27FhbJxt4dcV0PebRo0f11ltv6dKlS3J3d5e/v78ePHigxIkT686dOwoPD9dvv/2m3LlzO6lqAAnN467t5hq8+EHIA14Rj3tzvXv3rho0aKDUqVNr7ty5kqQHDx5o+vTp+uWXX5Q+fXrNmjVLiRIl4o34FfLotVV4dUW9b/zzzz/av3+/smbNqly5cildunQ6ceKEGjdurNdee019+/ZV1apV5e7uLmOMIiIiGCoBwFPRqVf8IeQBr4BHz74FBwcrIiJCmTJlsn2JP3XqlGrUqKFhw4apWbNmkqQLFy7oypUrypcvn9zc3OhFE3hFLVy4UB988IFSpUolq9WqcuXK6dNPP1XevHltZ/T8/f3VtWtX1axZ09nlAgBExyuAyzPG2ALeZ599pnr16ql69erKly+ffvjhB128eFGZM2dWs2bNtG3bNt25c0eSlD59ehUoUEBubm6yWq0EPMDFWa1W2/8fPHgg6eGPPb/++qvGjRunvXv36tNPP9WlS5fUo0cPHThwQAEBAVqwYIH27t2r7777Trdv33ZW+QCARxDyABcX1Qxi+PDh+vbbbzVixAgdOXJE/v7+GjZsmK5duyY3NzdVq1ZN//vf/7Rt2zZJD8NhFK7BA1yfm5ubzpw5I0ny8PDQtm3b1L17d926dUs1a9ZUsmTJ9OGHH6pt27aKiIhQz549dfDgQQUEBGjt2rUaPXq0kiZN6uS9AABIhDzA5RljdPPmTa1Zs0Zjx45V3bp1tXLlSu3atUv9+vVT3rx5FRkZqcqVK6tTp07q27evLly4QBt54BVz+/ZtNWvWTIULF5YkHT58WH///bd27txp937QpEkTtWvXTpL0wQcf6PDhw8qRI4eyZ8/ujLIBADEg5AGvgDt37ig4OFg1atTQ2rVr1bRpU33xxRf66KOPdOfOHU2YMEFnz55V48aN5e/vrwMHDji7ZAAvmKenpz7++GMZY1SnTh21bNnSdnauR48eOn/+vG3ZJk2a6N1331W6dOmUJEkSJ1YNAIgJHa8ALuZxPVXVrl1b9+7d099//60JEybogw8+kCSdOXNGzZs3V48ePfTWW29pzpw5CgwMVLFixV506QCcJKpzpoiICP3111/q3r27smXLpmXLlunHH3/UpEmTlCdPHn3xxRdKly6dbb2bN28qefLkTqwcABATQh7gQh7tRfPs2bNKlCiR7QvZjz/+qEGDBilnzpxasWKFpIcDnTdp0kR37tzR8uXL6TIfeEVEvVc8ePDANtTBo0Fv1apV6tGjh7Jnz64///xTs2fP1jfffKP8+fNr6NChypAhg5P3AADwJDTXBFxIVMD75JNP9MYbbygwMFADBgzQsWPH9Pbbb+udd97RyZMnVbJkSTVr1kw1atTQ2bNntWLFCnl6eioiIsLJewDgRXBzc9Pp06fVt29f7dmzxzbNarUqUaJEqlGjhsaPH69Tp06pRYsWatGihdq0aaOtW7dq+PDhioyMdPIeAACehFGNgZecMcZumIQ5c+Zozpw5GjlypM6cOaOpU6fq5MmTGjhwoAYNGqSqVatqzpw58vb2VrFixdSjRw8GOgdeQWFhYVqyZInu3r2rzp0728bEjAp6lStXVr9+/TRq1Cht27ZNbdu2ldVqVc2aNRlSBQASOJprAi5k27ZtWrBggQoVKqT33ntPkrRixQr17t1b+fPnV9++fVWkSJFo6zHQOfBqCgoKUps2bVS0aFF1795d+fLlk/R/7wmhoaHKlSuX+vfvr+7duzu3WABArNFcE3hJdejQQYsXL5b08Fqaf//9V1WqVNHEiRN19epV23I1a9bUmDFjtH//fn311VfasGFDtMci4AGvpsKFC+v777/Xrl27NH78eFvPuu7u7oqIiJC7u7uKFCmirFmzSrIfPxMAkHAR8oCXTNSXrNDQUDVo0EDSw2tpChUqpJkzZypFihTauHGjDh8+bFsnKuitXLlSa9eudUbZABKoIkWK2ILemDFjtHv3bkkP32vGjBmjI0eOqGjRopLE+JkA8JKguSbwEpo1a5YGDhyo4OBgzZ49W6GhoerSpYskae7cufr444/19ttvq1OnTgoICLCtt2PHDhUrVowzdwCi+ffff9WlSxddvXpVuXPnlru7u7Zt26bff//dNkA6AODlQC8LwEtm6tSp6tatm2bOnCnpYUcrt27dUuLEidW2bVu99957ioyM1IABAyRJnTt3Vs6cOSVJJUuWlMQ1eACiK1SokObOnatFixZp48aNKly4sIYPH65cuXI5uzQAgIM4kwe8RKZNm6bOnTvrl19+sTXVvHHjht577z1ZrVY1bNhQbdu2lfTwbN+gQYNUpUoVff7558qUKZMTKwcAAMCLwpk84CWxbt06tW/fXp999pkt4EnS0KFDlSVLFl24cEGzZ8+WJLVt21YtW7bU7du3tWLFCgYuBgAAeIVwJg94SRw9elRt2rRRypQpNXDgQBUvXlxvvfWW9u7dq6CgIN2+fVsfffSRLl++bBu4WHrYeYLFYpHVarWNpQcAAADXRcgDXiJHjx5V165dbeNX3b59WwsWLLB1bx4SEqKuXbtq7969+vLLL1WvXj1bb5z0igcAAPBq4Gd94CUSEBCgiRMn6t69e9q7d6/69etnC3gPHjxQunTpNH78eDVq1Eh16tSR9DDcEfAAAABeHZzJA15Cx48fV6dOneTm5qZPPvlE5cuXl/Qw6Hl4eNiWoxdNAACAVw8hD3hJRTXdlKRPP/1U5cqVc3JFAAAASAhorgm8pKKabrq7u6t79+7as2ePs0sCAABAAkDIA15iAQEBGj16tCpWrKj8+fM7uxwAAAAkADTXBFwIwyQAAACAkAcAAAAALoSf/AEAAADAhRDyAAAAAMCFEPIAAAAAwIUQ8gAAAADAhRDyAAAAAMCFEPIAAAAAwIUQ8gAALu3UqVOyWCwKCgpydikvROXKldW9e3fb/axZs2r8+PFPXOezzz5T4cKF47UuAMCLQ8gDAMSpKVOmKHny5IqIiLBNu3Xrljw8PFS5cmW7ZdetWyeLxaLjx4/HybZbtWqlBg0axMljPY+QkBB16dJF2bNnl5eXl/z9/VWvXj2tXr36hdfy999/q127drb7FotFixcvtlumd+/eTqkNABA/Ejm7AACAa6lSpYpu3bqlnTt3qnTp0pKkjRs3Kl26dNq+fbvu3r2rxIkTS5LWrl2rzJkzK0eOHM4s+Zncv39fnp6e0aafOnVK5cqVU4oUKTR69GgVKFBADx480IoVK9SpUycdOnTohdaZJk2apy7j7e0tb2/vF1ANAOBF4EweACBO5c6dW+nTp9e6dets09atW6f69esrW7Zs2rZtm930KlWqSJKsVqtGjhypbNmyKUmSJCpUqJDmz59vWzYyMlJt2rSxzc+dO7cmTJhgm//ZZ59p1qxZWrJkiSwWiywWi10NJ06cUJUqVZQ0aVIVKlRIW7dutat706ZNqlChgpIkSSJ/f3917dpV4eHhtvlZs2bVsGHD1KJFC/n4+NidHXtUx44dZbFYtGPHDr311lvKlSuX8uXLp549e9rte3BwsOrXry9vb2/5+PioSZMmunjxot3+FC5cWHPmzFHWrFnl6+urZs2a6ebNm7ZlwsPD1aJFC3l7eyt9+vQaO3ZstHoeba6ZNWtWSVLDhg1lsVhs9//bXNNqtWro0KHKlCmTvLy8VLhwYS1fvtw2P6oJ7MKFC5/4nAIAnIOQBwCIc1WqVNHatWtt99euXavKlSurUqVKtul37tzR9u3bbSFv5MiRmj17tqZMmaL9+/erR48eeu+997R+/XpJD4NHpkyZNG/ePB04cECDBg3SJ598ol9//VXSwyaHTZo0Ua1atXThwgVduHBBZcuWtdUwYMAA9e7dW0FBQcqVK5eaN29ua1J6/Phx1apVS2+99Zb27NmjX375RZs2bVLnzp3t9mvMmDEqVKiQdu/erYEDB0bb72vXrmn58uXq1KmTkiVLFm1+ihQpbPtSv359Xbt2TevXr9eqVat04sQJNW3a1G7548ePa/HixVq6dKmWLl2q9evX64svvrDN79Onj9avX68lS5Zo5cqVWrdunXbt2vXYv8vff/8tSZoxY4YuXLhgu/9fEyZM0NixYzVmzBjt2bNHNWvW1JtvvqmjR4/aLfek5xQA4EQGAIA4Nm3aNJMsWTLz4MEDExYWZhIlSmQuXbpkfvrpJ1OxYkVjjDGrV682kszp06fN3bt3TdKkSc2WLVvsHqdNmzamefPmj91Op06dzFtvvWW737JlS1O/fn27ZU6ePGkkme+//942bf/+/UaSOXjwoG077dq1s1tv48aNxs3Nzdy5c8cYY0yWLFlMgwYNnrjf27dvN5LMwoULn7jcypUrjbu7uwkODo5W044dO4wxxgwePNgkTZrUhIWF2Zbp06ePKVWqlDHGmJs3bxpPT0/z66+/2uZfvXrVJEmSxHTr1s02LUuWLGbcuHG2+5LMokWL7OoZPHiwKVSokO1+hgwZzPDhw+2WKVGihOnYsaMxJnbPKQDAebgmDwAQ5ypXrqzw8HD9/fffun79unLlyqU0adKoUqVKat26te7evat169Ype/bsypw5s/bv36/bt2+rRo0ado9z//59FSlSxHZ/8uTJmj59uoKDg3Xnzh3dv38/1r1CFixY0Pb/9OnTS5IuXbqkPHny6N9//9WePXv0448/2pYxxshqterkyZPKmzevJKl48eJP3IYxJla1HDx4UP7+/vL397dNCwwMVIoUKXTw4EGVKFFC0sPmlcmTJ7er+9KlS5IenuW7f/++SpUqZZufKlUq5c6dO1Y1PE5YWJjOnz+vcuXK2U0vV66c/v33X7tpT3pOAQDOQ8gDAMS5nDlzKlOmTFq7dq2uX7+uSpUqSZIyZMggf39/bdmyRWvXrlXVqlUlPex9U5L++OMPZcyY0e6xvLy8JEn/+9//1Lt3b40dO1ZlypRR8uTJNXr0aG3fvj1WNXl4eNj+b7FYJD1sNhm1/fbt26tr167R1sucObPt/zE1wXxUQECALBZLnHWu8mjN0sO6o2pOCJ70nAIAnIdr8gAA8aJKlSpat26d1q1bZzd0QsWKFbVs2TLt2LHDdj1eYGCgvLy8FBwcrJw5c9rdos52bd68WWXLllXHjh1VpEgR5cyZM9rQC56enoqMjHS41qJFi+rAgQPRtp0zZ84Ye9B8nFSpUqlmzZqaPHmyXactUW7cuCFJyps3r86cOaMzZ87Y5h04cEA3btxQYGBgrLaVI0cOeXh42IXc69ev68iRI09cz8PD44nPkY+PjzJkyKDNmzfbTd+8eXOsawMAOBchDwAQL6pUqaJNmzYpKCjIdiZPkipVqqSpU6fq/v37tpCXPHly9e7dWz169NCsWbN0/Phx7dq1S5MmTdKsWbMkPTxLtnPnTq1YsUJHjhzRwIEDo3UckjVrVu3Zs0eHDx/WlStX9ODBg1jV+vHHH2vLli3q3LmzgoKCdPToUS1ZsiRaxyuxMXnyZEVGRqpkyZJasGCBjh49qoMHD2rixIkqU6aMJKl69eoqUKCA3n33Xe3atUs7duxQixYtVKlSpac2CY3i7e2tNm3aqE+fPlqzZo327dunVq1ayc3tyR/tWbNm1erVqxUSEqLr16/HuEyfPn00atQo/fLLLzp8+LD69eunoKAgdevWzbEnAwDgFDTXBADEiypVqujOnTvKkyeP0qZNa5teqVIl3bx50zbUQpRhw4YpTZo0GjlypE6cOKEUKVKoaNGi+uSTTyRJ7du31+7du9W0aVNZLBY1b95cHTt21LJly2yP0bZtW61bt07FixfXrVu3tHbtWtswAU9SsGBBrV+/XgMGDFCFChVkjFGOHDmi9XYZG9mzZ9euXbs0fPhw9erVSxcuXFCaNGlUrFgxffvtt5IeNm1csmSJunTpoooVK8rNzU21atXSpEmTHNrW6NGjdevWLdWrV0/JkydXr169FBoa+sR1xo4dq549e2ratGnKmDGjTp06FW2Zrl27KjQ0VL169dKlS5cUGBio3377TQEBAQ7VBwBwDouJ7VXiAAAAAIAEj+aaAAAAAOBCCHkAAAAA4EIIeQAAAADgQgh5AAAAAOBCCHkAAAAA4EIIeQAAAADgQgh5AAAAAOBCCHkAAAAA4EIIeQAAAADgQgh5AAAAAOBCCHkAAAAA4EIIeQAAAADgQv4fenSCJVRJoEMAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 900x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting the distribution of cycling based on weather conditions for the new dataset\n",
    "plt.figure(figsize=(9, 5))\n",
    "weather_distribution_inner.plot(kind='bar', color='blue')\n",
    "plt.title('Distribution of Total Cycles Based on Weather Conditions (Inner London)')\n",
    "plt.xlabel('Weather Condition')\n",
    "plt.ylabel('Total Number of Cycles')\n",
    "plt.xticks(rotation=45)\n",
    "plt.tight_layout() \n",
    "\n",
    "# Save the plot to a file\n",
    "plt.savefig('inner_london_weather_distribution_plot.png')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "ad338ba3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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g4OVNWtWff7556pRo4aGDx+e5GawMTExOn/+vM6fP69Tp05pxYoV9i8fVatWtU935swZVa5cWcuWLVO3bt00atQoFSxYUB06dNDIkSMlScWKFbM3h+jcubMmT56syZMnq3r16qpWrZpiY2O1du1a+zLXrFkjJycnrVmzxj5s+/btunr1qqpXr24f1qVLF/Xp08d+LWf79u01depUBQcHO3wRmzx5sho2bCgPDw8NHTpUH330kXbv3q1nn33WIVClxOuWHC+//LLmzJmj9u3ba+zYserevbuuXLmio0eP2qeZNGmSPDw81KtXL40aNUqBgYHq16+f3n//fYdljRs3Tt26dVPu3Lk1bNgwVatWTSEhIfEOmLGxsXrxxRf1+eefq1GjRho9erRCQkL0xRdfqHnz5g+sOSnvwf/973/q3LmzpDtNMCdPnqwuXbok+/U5cOCAJClr1qz2Ybdv31ZwcLBy5Mihzz//PMFglD59er300kuaO3duvGaOc+fOVVRUlH3/ERkZqW+//VY1a9bU0KFDNWDAAJ07d07BwcH2A3/27Nk1btw4SdJLL71kf/82adJEkrRr1y5VrlxZe/bs0fvvv6/hw4fL3d1dISEhmjNnzn23MS4ItmnT5oGvxyuvvCI3NzdNnTo13ripU6eqZs2aypUrlyRp6dKlql69unbv3q0ePXpo+PDheu655zR//vz7ruOTTz5RaGioChUqpBEjRujtt9/W8uXLVb16dfv/Nzo6WsHBwdq4caPeeustjRkzRp07d9bBgwcfGK5mzpyp69ev64033tDo0aMVHBys0aNHKzQ0NN60SfksGmPUuHFjTZ48Wa+++qo+/vhjHT9+3P4jw4PMmzdPbm5ueuWVVx44bZs2bXThwgUtXrzYYfjp06e1YsUKh5YPAwcOVJs2bZQ+fXoNGjRIAwcOlL+/v1asWJHo8h/1sxknbr997yOpEvuMJXV/ez8XL17U+fPndfbsWW3fvl2dOnWSq6urmjVrluT6pDtNbGvVqqWAgAAtXLhQHh4eSToWSXeadnfv3l3FixfXyJEjNXDgQJUtW1Z//vnnfdd54sQJHT16VOXKlUtynWvXrtWbb76pFi1aaNiwYbp586ZefvllXbhwId60zZo105UrVxQWFqZmzZpp0qRJ9ibicZLy+Yxz4cIF1a9fX2XLltXIkSP13HPPJbnu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B04XEBCgMmXK6Mcff1S9evW0a9cuLViwwD7ezc0tyeu8evWq/Pz8tGrVqnjjMmXKJEkaMGCAWrVqpQULFmjhwoXq37+/pk+fft/r/AAAaRtn8gAAT41XX31VR44c0Zdffqndu3erbdu28abZuHGj/e/bt29r69atKlasmCSpXLly2rVrl/LmzauCBQs6PNzd3RNcZ7FixbRu3TqHYevWrVPhwoXl7Oyc5NpbtWqlZcuWafv27fHG3bp1S9euXbM/79ixoyZNmqSJEyeqTp068vf3t48rXbq0li9fnqR1litXTqdPn1a6dOnibW+2bNns0xUuXFg9e/bUkiVL1KRJk3jXPgIAni6EPADAUyNz5sxq0qSJ+vTpo3r16il37tzxphkzZozmzJmjvXv3qmvXrrp06ZK905KuXbvq4sWLatmypTZv3qwDBw5o8eLFat++faJNL3v37q3ly5dr8ODB+ueff/TDDz/oq6++0jvvvJOs2t9++21VrVpVtWvX1pgxY7Rjxw4dPHhQP//8sypXrqz9+/fbp23VqpWOHz+ub775xl57nP79++unn35S//79tWfPHv39998JnpmUpDp16igoKEghISFasmSJDh8+rPXr1+t///uftmzZohs3bqhbt25atWqVjhw5onXr1mnz5s32UAwAeDoR8gAAT5UOHTooOjo6XviJM2TIEA0ZMkRlypTR2rVrNW/ePPtZq5w5c2rdunWKiYlRvXr1VKpUKb399tvKlCmTnJwSPiSWK1dOP//8s6ZPn66SJUuqX79+GjRokNq1a5esul1cXLR06VK9++67mjBhgipXrqwKFSroyy+/VPfu3R3useft7a2XX35ZHh4eCgkJcVhOzZo1NXPmTM2bN09ly5ZVrVq1tGnTpgTXabPZ9Pvvv6t69epq3769ChcurBYtWujIkSPy8fGRs7OzLly4oNDQUBUuXFjNmjVT/fr1NXDgwGRtGwAgbbGZpF4JDgBAGjB58mT17NlTJ0+eVIYMGezDDx8+rHz58mn79u2WuKl47dq1VaJECX355ZepXQoA4ClDxysAgKfC9evXderUKQ0ZMkRdunRxCHhWcunSJa1atUqrVq3S2LFjU7scAMBTiOaaAICnwrBhw1S0aFH5+vqqb9++qV3OYxMQEKB27dpp6NChKlKkSGqXAwB4CtFcEwAAAAAshDN5AAAAAGAhhDwAAAAAsBBCHgAAAABYCCEPAAAAACyEkAcAAAAAFkLIAwAAAAALIeQBAAAAgIUQ8gAAAADAQv4PM144hQVFGngAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 900x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting the comparison between usage of private cycles and cycle hire bikes for the new dataset\n",
    "plt.figure(figsize=(9, 5))\n",
    "private_vs_hire_inner.plot(kind='bar', color=['green', 'orange'])\n",
    "plt.title('Comparison Between Usage of Private Cycles and Cycle Hire Bikes (Inner London)')\n",
    "plt.xlabel('Type of Cycles')\n",
    "plt.ylabel('Total Count')\n",
    "plt.xticks(rotation=0)\n",
    "plt.tight_layout()\n",
    "\n",
    "# Save the plot to a file\n",
    "plt.savefig('inner_london_private_vs_hire_inner_plot.png')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78606fe7",
   "metadata": {},
   "source": [
    "### Outer London "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "6a8fbb55",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survey wave (year)</th>\n",
       "      <th>Site ID</th>\n",
       "      <th>Location</th>\n",
       "      <th>Weather</th>\n",
       "      <th>Time</th>\n",
       "      <th>Period</th>\n",
       "      <th>Direction</th>\n",
       "      <th>Start time</th>\n",
       "      <th>Number of male cycles</th>\n",
       "      <th>Number of female cycles</th>\n",
       "      <th>Number of unknown cycles</th>\n",
       "      <th>Total cycles</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015</td>\n",
       "      <td>OUTCY001</td>\n",
       "      <td>High Road Leyton</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0600 - 0615</td>\n",
       "      <td>Early Morning</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>06:00</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015</td>\n",
       "      <td>OUTCY001</td>\n",
       "      <td>High Road Leyton</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0615 - 0630</td>\n",
       "      <td>Early Morning</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>06:15</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015</td>\n",
       "      <td>OUTCY001</td>\n",
       "      <td>High Road Leyton</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0630 - 0645</td>\n",
       "      <td>Early Morning</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>06:30</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015</td>\n",
       "      <td>OUTCY001</td>\n",
       "      <td>High Road Leyton</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0645 - 0700</td>\n",
       "      <td>Early Morning</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>06:45</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015</td>\n",
       "      <td>OUTCY001</td>\n",
       "      <td>High Road Leyton</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0700 - 0715</td>\n",
       "      <td>AM peak</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>07:00</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survey wave (year)   Site ID          Location Weather         Time  \\\n",
       "0                2015  OUTCY001  High Road Leyton     Dry  0600 - 0615   \n",
       "1                2015  OUTCY001  High Road Leyton     Dry  0615 - 0630   \n",
       "2                2015  OUTCY001  High Road Leyton     Dry  0630 - 0645   \n",
       "3                2015  OUTCY001  High Road Leyton     Dry  0645 - 0700   \n",
       "4                2015  OUTCY001  High Road Leyton     Dry  0700 - 0715   \n",
       "\n",
       "          Period   Direction Start time  Number of male cycles  \\\n",
       "0  Early Morning  Northbound      06:00                      2   \n",
       "1  Early Morning  Northbound      06:15                      3   \n",
       "2  Early Morning  Northbound      06:30                      2   \n",
       "3  Early Morning  Northbound      06:45                      4   \n",
       "4        AM peak  Northbound      07:00                      4   \n",
       "\n",
       "   Number of female cycles  Number of unknown cycles  Total cycles  \n",
       "0                        1                         0             3  \n",
       "1                        0                         0             3  \n",
       "2                        0                         0             2  \n",
       "3                        0                         0             4  \n",
       "4                        1                         0             5  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load the dataset for outer London\n",
    "cleaned_outer_london = pd.read_csv('cleaned_outer_london.csv')\n",
    "\n",
    "#veiw the dataframe\n",
    "cleaned_outer_london.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "3d41f0a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survey wave (year)</th>\n",
       "      <th>Number of male cycles</th>\n",
       "      <th>Number of female cycles</th>\n",
       "      <th>Number of unknown cycles</th>\n",
       "      <th>Total cycles</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>375660.000000</td>\n",
       "      <td>375660.000000</td>\n",
       "      <td>375660.000000</td>\n",
       "      <td>375660.000000</td>\n",
       "      <td>375660.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2017.848267</td>\n",
       "      <td>1.335207</td>\n",
       "      <td>0.240646</td>\n",
       "      <td>0.013837</td>\n",
       "      <td>1.589695</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.993641</td>\n",
       "      <td>2.701113</td>\n",
       "      <td>0.751606</td>\n",
       "      <td>0.157072</td>\n",
       "      <td>3.165160</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2015.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2016.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2018.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2019.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2021.000000</td>\n",
       "      <td>62.000000</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>78.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Survey wave (year)  Number of male cycles  Number of female cycles  \\\n",
       "count       375660.000000          375660.000000            375660.000000   \n",
       "mean          2017.848267               1.335207                 0.240646   \n",
       "std              1.993641               2.701113                 0.751606   \n",
       "min           2015.000000               0.000000                 0.000000   \n",
       "25%           2016.000000               0.000000                 0.000000   \n",
       "50%           2018.000000               0.000000                 0.000000   \n",
       "75%           2019.000000               2.000000                 0.000000   \n",
       "max           2021.000000              62.000000                19.000000   \n",
       "\n",
       "       Number of unknown cycles   Total cycles  \n",
       "count             375660.000000  375660.000000  \n",
       "mean                   0.013837       1.589695  \n",
       "std                    0.157072       3.165160  \n",
       "min                    0.000000       0.000000  \n",
       "25%                    0.000000       0.000000  \n",
       "50%                    0.000000       0.000000  \n",
       "75%                    0.000000       2.000000  \n",
       "max                   13.000000      78.000000  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Descriptive statistics\n",
    "cleaned_outer_london.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "1e1d31e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "597185"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Total count of cycles for the new dataset\n",
    "total_cycles_count_outer = cleaned_outer_london['Total cycles'].sum()\n",
    "\n",
    "total_cycles_count_outer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "8b623ce4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Period\n",
       "AM peak          2.158830\n",
       "Early Morning    1.232794\n",
       "Evening          1.207143\n",
       "Inter-peak       1.112798\n",
       "PM peak          2.475767\n",
       "Name: Total cycles, dtype: float64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Average number of cycles per time period for the new dataset\n",
    "average_cycles_per_period_outer = cleaned_outer_london.groupby('Period')['Total cycles'].mean()\n",
    "\n",
    "average_cycles_per_period_outer\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "75323f1b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Weather\n",
       "Cold           12\n",
       "Dry        534945\n",
       "Mixed         114\n",
       "Sunny         309\n",
       "Wet         52017\n",
       "Windy           0\n",
       "unknown      9788\n",
       "Name: Total cycles, dtype: int64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Distribution of cycling based on weather conditions for the new dataset\n",
    "weather_distribution_outer = cleaned_outer_london.groupby('Weather')['Total cycles'].sum()\n",
    "\n",
    "weather_distribution_outer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b9a1f91",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "3ead1e66",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting the distribution of cycling based on weather conditions for the outer London dataset\n",
    "plt.figure(figsize=(8, 4))\n",
    "weather_distribution_outer.plot(kind='bar', color='lightgreen')\n",
    "plt.title('Distribution of Total Cycles Based on Weather Conditions (Outer London)')\n",
    "plt.xlabel('Weather Condition')\n",
    "plt.ylabel('Total Number of Cycles')\n",
    "plt.xticks(rotation=45)\n",
    "plt.tight_layout()  \n",
    "\n",
    "# Save the plot to a file\n",
    "plt.savefig('Outer_london_weather_distribution_plot.png')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "22eeb099",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Number of male cycles      501584\n",
       "Number of female cycles     90401\n",
       "dtype: int64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# comparison of male and female cyclists for the outer London dataset\n",
    "gender_comparison_outer = cleaned_outer_london[['Number of male cycles', 'Number of female cycles']].sum()\n",
    "\n",
    "\n",
    "gender_comparison_outer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "421152e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting the comparison of male and female cyclists for the outer London dataset\n",
    "plt.figure(figsize=(8, 4))\n",
    "gender_comparison_outer.plot(kind='bar', color=['blue', 'magenta'])\n",
    "plt.title('Comparison of Male and Female Cyclists (Outer London)')\n",
    "plt.xlabel('Gender')\n",
    "plt.ylabel('Total Count')\n",
    "plt.xticks(rotation=0)\n",
    "plt.tight_layout()  \n",
    "\n",
    "# Save the plot to a file\n",
    "plt.savefig('gender_comparison_plot.png')\n",
    "\n",
    "# Show the plot for gender comparison\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a078678",
   "metadata": {},
   "source": [
    "### Combine the dataframes "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "4b75da52",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survey wave (calendar quarter)</th>\n",
       "      <th>Equivalent financial quarter</th>\n",
       "      <th>Site ID</th>\n",
       "      <th>Location</th>\n",
       "      <th>Survey_date</th>\n",
       "      <th>Survey_weekday</th>\n",
       "      <th>Weather</th>\n",
       "      <th>Time</th>\n",
       "      <th>Period</th>\n",
       "      <th>Direction</th>\n",
       "      <th>Start time</th>\n",
       "      <th>Number of private cycles</th>\n",
       "      <th>Number of cycle hire bikes</th>\n",
       "      <th>Total cycles</th>\n",
       "      <th>Survey wave (year)</th>\n",
       "      <th>Number of male cycles</th>\n",
       "      <th>Number of female cycles</th>\n",
       "      <th>Number of unknown cycles</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2014 Q1 (January-March)</td>\n",
       "      <td>2013-14 Q4</td>\n",
       "      <td>CENCY001</td>\n",
       "      <td>Millbank (south of Thorney Street)</td>\n",
       "      <td>24/01/14</td>\n",
       "      <td>Friday</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0600 - 0615</td>\n",
       "      <td>Early Morning</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>06:00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2014 Q1 (January-March)</td>\n",
       "      <td>2013-14 Q4</td>\n",
       "      <td>CENCY001</td>\n",
       "      <td>Millbank (south of Thorney Street)</td>\n",
       "      <td>24/01/14</td>\n",
       "      <td>Friday</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0615 - 0630</td>\n",
       "      <td>Early Morning</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>06:15</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2014 Q1 (January-March)</td>\n",
       "      <td>2013-14 Q4</td>\n",
       "      <td>CENCY001</td>\n",
       "      <td>Millbank (south of Thorney Street)</td>\n",
       "      <td>24/01/14</td>\n",
       "      <td>Friday</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0630 - 0645</td>\n",
       "      <td>Early Morning</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>06:30</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2014 Q1 (January-March)</td>\n",
       "      <td>2013-14 Q4</td>\n",
       "      <td>CENCY001</td>\n",
       "      <td>Millbank (south of Thorney Street)</td>\n",
       "      <td>24/01/14</td>\n",
       "      <td>Friday</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0645 - 0700</td>\n",
       "      <td>Early Morning</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>06:45</td>\n",
       "      <td>59.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>61</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2014 Q1 (January-March)</td>\n",
       "      <td>2013-14 Q4</td>\n",
       "      <td>CENCY001</td>\n",
       "      <td>Millbank (south of Thorney Street)</td>\n",
       "      <td>24/01/14</td>\n",
       "      <td>Friday</td>\n",
       "      <td>Dry</td>\n",
       "      <td>0700 - 0715</td>\n",
       "      <td>AM peak</td>\n",
       "      <td>Northbound</td>\n",
       "      <td>07:00</td>\n",
       "      <td>73.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>73</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1657594</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>OUTCY451</td>\n",
       "      <td>Thames Path (Lower Ham Road)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Wet</td>\n",
       "      <td>2045 - 2100</td>\n",
       "      <td>Evening</td>\n",
       "      <td>Southbound</td>\n",
       "      <td>20:45</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2021.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1657595</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>OUTCY451</td>\n",
       "      <td>Thames Path (Lower Ham Road)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Wet</td>\n",
       "      <td>2100 - 2115</td>\n",
       "      <td>Evening</td>\n",
       "      <td>Southbound</td>\n",
       "      <td>21:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>2021.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1657596</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>OUTCY451</td>\n",
       "      <td>Thames Path (Lower Ham Road)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Wet</td>\n",
       "      <td>2115 - 2130</td>\n",
       "      <td>Evening</td>\n",
       "      <td>Southbound</td>\n",
       "      <td>21:15</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2021.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1657597</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>OUTCY451</td>\n",
       "      <td>Thames Path (Lower Ham Road)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Wet</td>\n",
       "      <td>2130 - 2145</td>\n",
       "      <td>Evening</td>\n",
       "      <td>Southbound</td>\n",
       "      <td>21:30</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2021.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1657598</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>OUTCY451</td>\n",
       "      <td>Thames Path (Lower Ham Road)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Wet</td>\n",
       "      <td>2145 - 2200</td>\n",
       "      <td>Evening</td>\n",
       "      <td>Southbound</td>\n",
       "      <td>21:45</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2021.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1657599 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Survey wave (calendar quarter) Equivalent financial quarter   Site ID  \\\n",
       "0              2014 Q1 (January-March)                   2013-14 Q4  CENCY001   \n",
       "1              2014 Q1 (January-March)                   2013-14 Q4  CENCY001   \n",
       "2              2014 Q1 (January-March)                   2013-14 Q4  CENCY001   \n",
       "3              2014 Q1 (January-March)                   2013-14 Q4  CENCY001   \n",
       "4              2014 Q1 (January-March)                   2013-14 Q4  CENCY001   \n",
       "...                                ...                          ...       ...   \n",
       "1657594                            NaN                          NaN  OUTCY451   \n",
       "1657595                            NaN                          NaN  OUTCY451   \n",
       "1657596                            NaN                          NaN  OUTCY451   \n",
       "1657597                            NaN                          NaN  OUTCY451   \n",
       "1657598                            NaN                          NaN  OUTCY451   \n",
       "\n",
       "                                   Location Survey_date Survey_weekday  \\\n",
       "0        Millbank (south of Thorney Street)    24/01/14         Friday   \n",
       "1        Millbank (south of Thorney Street)    24/01/14         Friday   \n",
       "2        Millbank (south of Thorney Street)    24/01/14         Friday   \n",
       "3        Millbank (south of Thorney Street)    24/01/14         Friday   \n",
       "4        Millbank (south of Thorney Street)    24/01/14         Friday   \n",
       "...                                     ...         ...            ...   \n",
       "1657594        Thames Path (Lower Ham Road)         NaN            NaN   \n",
       "1657595        Thames Path (Lower Ham Road)         NaN            NaN   \n",
       "1657596        Thames Path (Lower Ham Road)         NaN            NaN   \n",
       "1657597        Thames Path (Lower Ham Road)         NaN            NaN   \n",
       "1657598        Thames Path (Lower Ham Road)         NaN            NaN   \n",
       "\n",
       "        Weather         Time         Period   Direction Start time  \\\n",
       "0           Dry  0600 - 0615  Early Morning  Northbound      06:00   \n",
       "1           Dry  0615 - 0630  Early Morning  Northbound      06:15   \n",
       "2           Dry  0630 - 0645  Early Morning  Northbound      06:30   \n",
       "3           Dry  0645 - 0700  Early Morning  Northbound      06:45   \n",
       "4           Dry  0700 - 0715        AM peak  Northbound      07:00   \n",
       "...         ...          ...            ...         ...        ...   \n",
       "1657594     Wet  2045 - 2100        Evening  Southbound      20:45   \n",
       "1657595     Wet  2100 - 2115        Evening  Southbound      21:00   \n",
       "1657596     Wet  2115 - 2130        Evening  Southbound      21:15   \n",
       "1657597     Wet  2130 - 2145        Evening  Southbound      21:30   \n",
       "1657598     Wet  2145 - 2200        Evening  Southbound      21:45   \n",
       "\n",
       "         Number of private cycles  Number of cycle hire bikes  Total cycles  \\\n",
       "0                             0.0                         0.0             0   \n",
       "1                            15.0                         0.0            15   \n",
       "2                            35.0                         0.0            35   \n",
       "3                            59.0                         2.0            61   \n",
       "4                            73.0                         0.0            73   \n",
       "...                           ...                         ...           ...   \n",
       "1657594                       NaN                         NaN             1   \n",
       "1657595                       NaN                         NaN             2   \n",
       "1657596                       NaN                         NaN             0   \n",
       "1657597                       NaN                         NaN             0   \n",
       "1657598                       NaN                         NaN             1   \n",
       "\n",
       "         Survey wave (year)  Number of male cycles  Number of female cycles  \\\n",
       "0                       NaN                    NaN                      NaN   \n",
       "1                       NaN                    NaN                      NaN   \n",
       "2                       NaN                    NaN                      NaN   \n",
       "3                       NaN                    NaN                      NaN   \n",
       "4                       NaN                    NaN                      NaN   \n",
       "...                     ...                    ...                      ...   \n",
       "1657594              2021.0                    1.0                      0.0   \n",
       "1657595              2021.0                    2.0                      0.0   \n",
       "1657596              2021.0                    0.0                      0.0   \n",
       "1657597              2021.0                    0.0                      0.0   \n",
       "1657598              2021.0                    1.0                      0.0   \n",
       "\n",
       "         Number of unknown cycles  \n",
       "0                             NaN  \n",
       "1                             NaN  \n",
       "2                             NaN  \n",
       "3                             NaN  \n",
       "4                             NaN  \n",
       "...                           ...  \n",
       "1657594                       0.0  \n",
       "1657595                       0.0  \n",
       "1657596                       0.0  \n",
       "1657597                       0.0  \n",
       "1657598                       0.0  \n",
       "\n",
       "[1657599 rows x 18 columns]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Concatenate all three dataframes into one\n",
    "london_combined = pd.concat([clean_central_london, cleaned_inner_london, cleaned_outer_london], ignore_index=True)\n",
    "\n",
    "# Display the first few rows of the combined dataframe\n",
    "london_combined"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "db7e0031",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1657599 entries, 0 to 1657598\n",
      "Data columns (total 18 columns):\n",
      " #   Column                          Non-Null Count    Dtype  \n",
      "---  ------                          --------------    -----  \n",
      " 0   Survey wave (calendar quarter)  758163 non-null   object \n",
      " 1   Equivalent financial quarter    758163 non-null   object \n",
      " 2   Site ID                         1657599 non-null  object \n",
      " 3   Location                        1657599 non-null  object \n",
      " 4   Survey_date                     1281939 non-null  object \n",
      " 5   Survey_weekday                  1281939 non-null  object \n",
      " 6   Weather                         1657599 non-null  object \n",
      " 7   Time                            1657599 non-null  object \n",
      " 8   Period                          1657599 non-null  object \n",
      " 9   Direction                       1657599 non-null  object \n",
      " 10  Start time                      1657599 non-null  object \n",
      " 11  Number of private cycles        1281939 non-null  float64\n",
      " 12  Number of cycle hire bikes      1281939 non-null  float64\n",
      " 13  Total cycles                    1657599 non-null  int64  \n",
      " 14  Survey wave (year)              899436 non-null   float64\n",
      " 15  Number of male cycles           375660 non-null   float64\n",
      " 16  Number of female cycles         375660 non-null   float64\n",
      " 17  Number of unknown cycles        375660 non-null   float64\n",
      "dtypes: float64(6), int64(1), object(11)\n",
      "memory usage: 227.6+ MB\n"
     ]
    }
   ],
   "source": [
    "london_combined.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "7b44f94a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Survey wave (calendar quarter)     899436\n",
       "Equivalent financial quarter       899436\n",
       "Survey_date                        375660\n",
       "Survey_weekday                     375660\n",
       "Number of private cycles           375660\n",
       "Number of cycle hire bikes         375660\n",
       "Survey wave (year)                 758163\n",
       "Number of male cycles             1281939\n",
       "Number of female cycles           1281939\n",
       "Number of unknown cycles          1281939\n",
       "dtype: int64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Identify columns with NaN values along with the count of NaNs in each of those columns\n",
    "nan_columns_count = london_combined.isna().sum()\n",
    "\n",
    "# Filter out columns that have any NaN values\n",
    "nan_columns_with_count = nan_columns_count[nan_columns_count > 0]\n",
    "\n",
    "nan_columns_with_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "a31542dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1531480    Monks Orchard Road\n",
       " 839946            King's Road\n",
       " 421623            Fetter Lane\n",
       " 1262302           Bowen Drive\n",
       " 1382023             The Glade\n",
       " Name: Location, dtype: object,\n",
       " 1531480    OUTCY146\n",
       " 839946     INNCY042\n",
       " 421623     CENCY067\n",
       " 1262302    INNCY469\n",
       " 1382023    OUTCY331\n",
       " Name: Site ID, dtype: object)"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Extract a sample of 'Location' column values\n",
    "location_sample = london_combined['Location'].sample(5, random_state=1)\n",
    "\n",
    "# Extract a sample of 'Site ID' column values\n",
    "site_id_sample = london_combined['Site ID'].sample(5, random_state=1)\n",
    "\n",
    "location_sample, site_id_sample"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "487e15a7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total cycles in Central London: 12625719\n"
     ]
    }
   ],
   "source": [
    "# Use location ID for central/ outer / london to determine most journeys completed. \n",
    "\n",
    "# Filter the dataframe based on 'Site ID' column\n",
    "central_london = london_combined[london_combined['Site ID'].str.startswith('CENCY')]\n",
    "\n",
    "# Calculate the sum of 'Total cycles' for each region\n",
    "total_cycles_central = central_london['Total cycles'].sum()\n",
    "\n",
    "# view the results\n",
    "print(f\"Total cycles in Central London: {total_cycles_central}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "fb7b9718",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total cycles in Inner London: 3245530\n"
     ]
    }
   ],
   "source": [
    "# Inner London\n",
    "inner_london = london_combined[london_combined['Site ID'].str.startswith('INNCY')]\n",
    "\n",
    "total_cycles_inner = inner_london['Total cycles'].sum()\n",
    "\n",
    "#view the results\n",
    "print(f\"Total cycles in Inner London: {total_cycles_inner}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "8267e7db",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total cycles in Outer London: 597185\n"
     ]
    }
   ],
   "source": [
    "# Outer London\n",
    "total_cycles_outer = outer_london['Total cycles'].sum()\n",
    "\n",
    "outer_london = london_combined[london_combined['Site ID'].str.startswith('OUTCY')]\n",
    "\n",
    "print(f\"Total cycles in Outer London: {total_cycles_outer}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "adcefa18",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualisation of journeys completed for inner, outer & central london\n",
    "regions = ['Central London', 'Inner London', 'Outer London']\n",
    "total_cycles = [total_cycles_central, total_cycles_inner, total_cycles_outer]\n",
    "\n",
    "# Create a bar chart\n",
    "plt.figure(figsize=(9, 5))\n",
    "plt.bar(regions, total_cycles, color=['blue', 'green', 'red'])\n",
    "\n",
    "# Add titles and labels\n",
    "plt.title('Total Cycles in London by Region')\n",
    "plt.xlabel('Region')\n",
    "plt.ylabel('Total Cycles')\n",
    "plt.grid(axis='y', which='both')\n",
    "\n",
    "# Save the plot to a file\n",
    "plt.savefig('total_cycles_london_plot.png')\n",
    "\n",
    "# Display the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "30419de9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Trying a different approach: using a pie chart to visualize the data\n",
    "\n",
    "# Data for plotting\n",
    "regions = ['Central London', 'Inner London', 'Outer London']\n",
    "total_cycles = [total_cycles_central, total_cycles_inner, total_cycles_outer]\n",
    "\n",
    "# Create a pie chart\n",
    "plt.figure(figsize=(8, 8))\n",
    "plt.pie(total_cycles, labels=regions, autopct='%2.2f%%', startangle=140, colors=['blue', 'green', 'red'])\n",
    "\n",
    "# Add a title\n",
    "plt.title('Total Cycles in London by Region')\n",
    "\n",
    "# Save the plot to a file\n",
    "plt.savefig('total_cycles_london_pie_plot.png')\n",
    "\n",
    "# Display the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "be3c04f7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
